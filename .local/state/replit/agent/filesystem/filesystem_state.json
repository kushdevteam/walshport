{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2787},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path, { dirname } from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\nimport { fileURLToPath } from \"url\";\nimport glsl from \"vite-plugin-glsl\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    glsl(), // Add GLSL shader support\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(__dirname, \"shared\"),\n    },\n  },\n  root: path.resolve(__dirname, \"client\"),\n  build: {\n    outDir: path.resolve(__dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  // Add support for large models and audio files\n  assetsInclude: [\"**/*.gltf\", \"**/*.glb\", \"**/*.mp3\", \"**/*.ogg\", \"**/*.wav\"],\n});\n","size_bytes":896},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":1871},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // put application routes here\n  // prefix all routes with /api\n\n  // use storage to perform CRUD operations on the storage interface\n  // e.g. storage.insertUser(user) or storage.getUserByUsername(username)\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":473},"server/storage.ts":{"content":"import { users, type User, type InsertUser } from \"@shared/schema\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<number, User>;\n  currentId: number;\n\n  constructor() {\n    this.users = new Map();\n    this.currentId = 1;\n  }\n\n  async getUser(id: number): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = this.currentId++;\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":1012},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path, { dirname } from \"path\";\nimport { fileURLToPath } from \"url\";\nimport { createServer as createViteServer, createLogger, type ServerOptions } from \"vite\";\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions: ServerOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        __dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(__dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2409},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n","size_bytes":533},"client/src/App.tsx":{"content":"import { Canvas } from \"@react-three/fiber\";\nimport { Suspense, useState, useEffect } from \"react\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport \"@fontsource/inter\";\nimport Scene from \"./components/3d/Scene\";\nimport UIOverlay from \"./components/ui/UIOverlay\";\nimport WebGLFallback from \"./components/ui/WebGLFallback\";\nimport { detectWebGL } from \"./lib/utils/webgl\";\n\nconst queryClient = new QueryClient();\n\nfunction App() {\n  const [mode, setMode] = useState<'checking' | '3d' | 'fallback'>('checking');\n  const [canvasKey, setCanvasKey] = useState(0);\n  const [error, setError] = useState<string | undefined>();\n\n  useEffect(() => {\n    // Check WebGL support on component mount\n    const checkWebGL = () => {\n      try {\n        const support = detectWebGL();\n        console.log('WebGL Support Check:', support);\n        \n        if (support.isSupported) {\n          setMode('3d');\n        } else {\n          setMode('fallback');\n          setError(support.error);\n        }\n      } catch (error) {\n        console.error('WebGL detection error:', error);\n        setMode('fallback');\n        setError(error instanceof Error ? error.message : 'WebGL detection failed');\n      }\n    };\n\n    // Immediate check - no delay needed\n    checkWebGL();\n  }, []);\n\n  // Show loading state while checking WebGL\n  if (mode === 'checking') {\n    return (\n      <div className=\"w-screen h-screen bg-black flex items-center justify-center\">\n        <div className=\"text-cyan-400 font-mono text-center\">\n          <div className=\"text-4xl mb-4\">🌌 WLSFX</div>\n          <div className=\"text-lg animate-pulse\">Initializing...</div>\n        </div>\n      </div>\n    );\n  }\n\n  // Show fallback UI if WebGL is not supported or context was lost\n  if (mode === 'fallback') {\n    return (\n      <QueryClientProvider client={queryClient}>\n        <WebGLFallback error={error} />\n      </QueryClientProvider>\n    );\n  }\n\n\n  // Show 3D portfolio if WebGL is supported\n  return (\n    <QueryClientProvider client={queryClient}>\n      <div style={{ width: '100vw', height: '100vh', position: 'relative', overflow: 'hidden', background: '#000' }}>\n        <Canvas\n          key={canvasKey}\n          dpr={[1, 1]}\n          gl={{ \n            antialias: false, \n            powerPreference: 'low-power', \n            failIfMajorPerformanceCaveat: false, \n            alpha: true, \n            stencil: false, \n            depth: true, \n            preserveDrawingBuffer: false \n          }}\n          camera={{\n            position: [0, 5, 15],\n            fov: 60\n          }}\n          onCreated={({ gl }) => {\n            console.log('WebGL renderer initialized successfully');\n            const canvas = gl.domElement as HTMLCanvasElement;\n            \n            const onLost = (e: Event) => { \n              e.preventDefault(); \n              console.warn('WebGL context lost'); \n              setMode('fallback');\n              setError('WebGL context was lost');\n            };\n            \n            const onRestored = () => { \n              console.info('WebGL context restored'); \n              setCanvasKey(k => k + 1); \n              setMode('3d'); \n            };\n            \n            const onCreationError = (e: any) => { \n              console.error('WebGL creation error', e?.statusMessage); \n              setMode('fallback');\n              setError('WebGL context creation failed');\n            };\n            \n            canvas.addEventListener('webglcontextlost', onLost as EventListener, { passive: false });\n            canvas.addEventListener('webglcontextrestored', onRestored as EventListener);\n            canvas.addEventListener('webglcontextcreationerror', onCreationError as EventListener);\n          }}\n          onError={(error) => {\n            console.error('Canvas error occurred:', error);\n            // Don't immediately fallback on every error - many are recoverable\n            // Only fallback on critical WebGL context errors\n            if (error && (error.toString().includes('context') || error.toString().includes('WebGL'))) {\n              console.error('Critical WebGL error detected, switching to fallback');\n              setMode('fallback');\n              setError('Canvas rendering failed: ' + error.toString());\n            } else {\n              console.warn('Non-critical Canvas error, continuing in 3D mode:', error);\n            }\n          }}\n        >\n          <color attach=\"background\" args={[\"#000\"]} />\n          <Suspense fallback={null}>\n            <Scene />\n          </Suspense>\n        </Canvas>\n        <UIOverlay />\n      </div>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":4675},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    margin: 0;\n    padding: 0;\n    overflow: hidden;\n    width: 100vw;\n    height: 100vh;\n  }\n}\n\n#root {\n  width: 100%;\n  height: 100%;\n  position: fixed;\n}\n\ncanvas {\n  width: 100% !important;\n  height: 100% !important;\n  touch-action: none;\n}","size_bytes":427},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-is-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey[0] as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1376},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nconst getLocalStorage = (key: string): any =>\n  JSON.parse(window.localStorage.getItem(key) || \"null\");\nconst setLocalStorage = (key: string, value: any): void =>\n  window.localStorage.setItem(key, JSON.stringify(value));\n\nexport { getLocalStorage, setLocalStorage };\n","size_bytes":438},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/3d/AboutTerminal.tsx":{"content":"import { useFrame } from \"@react-three/fiber\";\nimport { Text, useGLTF } from \"@react-three/drei\";\nimport { useRef, useState, useEffect, useMemo } from \"react\";\nimport * as THREE from \"three\";\nimport { portfolioData } from \"../../lib/constants/portfolioData\";\n\nexport default function AboutTerminal() {\n  const terminalRef = useRef<THREE.Group>(null);\n  const avatarRef = useRef<THREE.Group>(null);\n  const [displayedText, setDisplayedText] = useState(\"\");\n  const [currentIndex, setCurrentIndex] = useState(0);\n\n  const fullText = portfolioData.about.description;\n  \n  // Load the avatar terminal 3D model\n  const { scene } = useGLTF('/models/avatar_terminal.glb');\n  \n  // Clone the scene to avoid issues with multiple instances\n  const clonedScene = useMemo(() => scene.clone(), [scene]);\n\n  // Typewriter effect\n  useEffect(() => {\n    if (currentIndex < fullText.length) {\n      const timer = setTimeout(() => {\n        setDisplayedText(fullText.slice(0, currentIndex + 1));\n        setCurrentIndex(currentIndex + 1);\n      }, 50);\n      return () => clearTimeout(timer);\n    }\n  }, [currentIndex, fullText]);\n\n  useFrame((state) => {\n    if (terminalRef.current) {\n      terminalRef.current.position.y = Math.sin(state.clock.elapsedTime * 0.3) * 0.1;\n      terminalRef.current.rotation.y = Math.sin(state.clock.elapsedTime * 0.2) * 0.05;\n    }\n    \n    if (avatarRef.current) {\n      // Additional floating animation for the avatar\n      avatarRef.current.position.y = Math.sin(state.clock.elapsedTime * 0.5) * 0.2;\n      avatarRef.current.rotation.y += 0.01;\n    }\n  });\n\n  return (\n    <group ref={terminalRef} position={[8, 0, 0]}>\n      <Text\n        position={[0, 4, 0]}\n        fontSize={1}\n        color=\"#4fd1c7\"\n        anchorX=\"center\"\n        anchorY=\"middle\"\n        font=\"/fonts/inter.json\"\n      >\n        ABOUT\n      </Text>\n\n      {/* Avatar Terminal 3D Model */}\n      <group \n        ref={avatarRef}\n        scale={[2.5, 2.5, 2.5]}\n        position={[0, 0, 0]}\n      >\n        <primitive \n          object={clonedScene} \n          castShadow \n          receiveShadow\n        />\n      </group>\n\n      {/* Holographic text display overlay */}\n      <group position={[0, 1, 2]}>\n\n        {/* Terminal prompt */}\n        <Text\n          position={[-2, 1, 0]}\n          fontSize={0.15}\n          color=\"#4fd1c7\"\n          anchorX=\"left\"\n          anchorY=\"top\"\n          font=\"/fonts/inter.json\"\n        >\n          user@wlsfx:~$ cat about.txt\n        </Text>\n\n        {/* About content with typewriter effect */}\n        <Text\n          position={[-2, 0.5, 0]}\n          fontSize={0.12}\n          color=\"#ffffff\"\n          anchorX=\"left\"\n          anchorY=\"top\"\n          font=\"/fonts/inter.json\"\n          maxWidth={4}\n        >\n          {displayedText}\n          {currentIndex < fullText.length && (\n            <Text\n              position={[0, 0, 0]}\n              fontSize={0.12}\n              color=\"#4fd1c7\"\n              anchorX=\"left\"\n              anchorY=\"top\"\n              font=\"/fonts/inter.json\"\n            >\n              ▋\n            </Text>\n          )}\n        </Text>\n\n        {/* Developer details */}\n        <Text\n          position={[-2, -0.5, 0]}\n          fontSize={0.1}\n          color=\"#9f7aea\"\n          anchorX=\"left\"\n          anchorY=\"top\"\n          font=\"/fonts/inter.json\"\n        >\n          Experience: {portfolioData.about.experience}\n        </Text>\n\n        <Text\n          position={[-2, -0.8, 0]}\n          fontSize={0.1}\n          color=\"#9f7aea\"\n          anchorX=\"left\"\n          anchorY=\"top\"\n          font=\"/fonts/inter.json\"\n        >\n          Location: {portfolioData.about.location}\n        </Text>\n      </group>\n\n      {/* Particle effects around avatar */}\n      {Array.from({ length: 12 }).map((_, i) => {\n        const angle = (i / 12) * Math.PI * 2;\n        const radius = 3;\n        return (\n          <mesh \n            key={i} \n            position={[\n              Math.cos(angle) * radius, \n              Math.sin(angle * 0.8) * 1.5, \n              Math.sin(angle) * radius\n            ]}\n          >\n            <sphereGeometry args={[0.03, 8, 8]} />\n            <meshBasicMaterial \n              color=\"#4fd1c7\" \n              transparent \n              opacity={0.4}\n            />\n          </mesh>\n        );\n      })}\n    </group>\n  );\n}\n\n// Preload the model\nuseGLTF.preload('/models/avatar_terminal.glb');\n","size_bytes":4400},"client/src/components/3d/ArcadeCabinet.tsx":{"content":"import { useFrame } from \"@react-three/fiber\";\nimport { Text, useGLTF } from \"@react-three/drei\";\nimport { useRef, useState, useMemo } from \"react\";\nimport * as THREE from \"three\";\n\ninterface ArcadeCabinetProps {\n  position: [number, number, number];\n  project: {\n    id: number;\n    title: string;\n    description: string;\n    tech: string[];\n    color: string;\n    type: string;\n  };\n  isSelected: boolean;\n  onClick: () => void;\n}\n\nexport default function ArcadeCabinet({ \n  position, \n  project, \n  isSelected, \n  onClick \n}: ArcadeCabinetProps) {\n  const cabinetRef = useRef<THREE.Group>(null);\n  const cubeRef = useRef<THREE.Group>(null);\n  const [isHovered, setIsHovered] = useState(false);\n  \n  // Load the gallery cubes 3D model\n  const { scene } = useGLTF('/models/gallery_cubes.glb');\n  \n  // Clone the scene to avoid issues with multiple instances\n  const clonedScene = useMemo(() => scene.clone(), [scene]);\n\n  useFrame((state) => {\n    if (cabinetRef.current) {\n      // Subtle floating animation\n      cabinetRef.current.position.y = position[1] + Math.sin(state.clock.elapsedTime * 0.8 + position[0]) * 0.05;\n    }\n\n    if (cubeRef.current) {\n      // Game cube special rotation pattern\n      cubeRef.current.rotation.y += 0.015;\n      cubeRef.current.rotation.z = Math.sin(state.clock.elapsedTime * 0.4) * 0.05;\n      \n      // Scale effect when selected or hovered (more dramatic for games)\n      const targetScale = isSelected ? 1.4 : isHovered ? 1.2 : 1;\n      cubeRef.current.scale.lerp(new THREE.Vector3(targetScale, targetScale, targetScale), 0.1);\n    }\n  });\n\n  return (\n    <group \n      ref={cabinetRef} \n      position={position}\n      onClick={onClick}\n      onPointerOver={() => {\n        setIsHovered(true);\n        document.body.style.cursor = 'pointer';\n      }}\n      onPointerOut={() => {\n        setIsHovered(false);\n        document.body.style.cursor = 'default';\n      }}\n    >\n      {/* Game Gallery Cube 3D Model */}\n      <group \n        ref={cubeRef}\n        scale={[1.8, 1.8, 1.8]}\n        position={[0, 0, 0]}\n      >\n        <primitive \n          object={clonedScene} \n          castShadow \n          receiveShadow\n        />\n      </group>\n\n      {/* Game Information Display */}\n      <group position={[0, 2.5, 0]}>\n        <Text\n          position={[0, 0, 0]}\n          fontSize={0.25}\n          color={project.color}\n          anchorX=\"center\"\n          anchorY=\"middle\"\n          font=\"/fonts/inter.json\"\n          maxWidth={3}\n        >\n          {project.title}\n        </Text>\n\n        <Text\n          position={[0, -0.4, 0]}\n          fontSize={0.15}\n          color=\"#00ff00\"\n          anchorX=\"center\"\n          anchorY=\"middle\"\n          font=\"/fonts/inter.json\"\n        >\n          {project.type.toUpperCase()} GAME\n        </Text>\n\n        {/* Retro game indicator */}\n        <Text\n          position={[0, -0.7, 0]}\n          fontSize={0.1}\n          color=\"#ffff00\"\n          anchorX=\"center\"\n          anchorY=\"middle\"\n          font=\"/fonts/inter.json\"\n        >\n          ► PRESS START TO PLAY ◄\n        </Text>\n      </group>\n\n      {/* Hover/Selection Effects */}\n      {(isHovered || isSelected) && (\n        <mesh position={[0, -1.5, 0]}>\n          <cylinderGeometry args={[2.5, 2.5, 0.1, 32]} />\n          <meshBasicMaterial\n            color={project.color}\n            transparent\n            opacity={0.4}\n          />\n        </mesh>\n      )}\n\n      {/* Pixelated energy effects for games */}\n      {(isHovered || isSelected) && (\n        <group>\n          {Array.from({ length: 4 }).map((_, i) => (\n            <mesh key={i} position={[0, i * 0.8 - 1.5, 0]} rotation={[0, i * Math.PI * 0.25, 0]}>\n              <torusGeometry args={[2 + i * 0.2, 0.08, 4, 8]} />\n              <meshBasicMaterial\n                color={i % 2 === 0 ? project.color : \"#00ff00\"}\n                transparent\n                opacity={0.5 - i * 0.1}\n              />\n            </mesh>\n          ))}\n        </group>\n      )}\n\n      {/* Expanded Game Details */}\n      {isSelected && (\n        <group position={[0, -3, 0]}>\n          {/* Retro-style info panel */}\n          <mesh>\n            <planeGeometry args={[5.5, 2.2]} />\n            <meshBasicMaterial \n              color=\"#000000\" \n              transparent \n              opacity={0.9} \n            />\n          </mesh>\n          \n          {/* Pixelated border effect */}\n          <mesh position={[0, 0, -0.01]}>\n            <planeGeometry args={[5.6, 2.3]} />\n            <meshBasicMaterial \n              color={project.color} \n              transparent \n              opacity={0.4} \n            />\n          </mesh>\n          \n          <Text\n            position={[0, 0.6, 0.01]}\n            fontSize={0.14}\n            color=\"#ffffff\"\n            anchorX=\"center\"\n            anchorY=\"middle\"\n            font=\"/fonts/inter.json\"\n            maxWidth={5}\n          >\n            {project.description}\n          </Text>\n\n          <Text\n            position={[0, 0.1, 0.01]}\n            fontSize={0.11}\n            color={project.color}\n            anchorX=\"center\"\n            anchorY=\"middle\"\n            font=\"/fonts/inter.json\"\n          >\n            ENGINE: {project.tech.join(' | ')}\n          </Text>\n\n          <Text\n            position={[0, -0.4, 0.01]}\n            fontSize={0.1}\n            color=\"#00ff00\"\n            anchorX=\"center\"\n            anchorY=\"middle\"\n            font=\"/fonts/inter.json\"\n          >\n            ♦ INSERT COIN TO CONTINUE ♦\n          </Text>\n        </group>\n      )}\n    </group>\n  );\n}\n\n// Preload the model\nuseGLTF.preload('/models/gallery_cubes.glb');","size_bytes":5626},"client/src/components/3d/CollectibleSystem.tsx":{"content":"import { useState, useMemo, useCallback } from \"react\";\nimport CollectibleToken from \"./CollectibleToken\";\nimport HeartModel from \"./HeartModel\";\nimport { Text } from \"@react-three/drei\";\n\ninterface CollectibleData {\n  id: string;\n  position: [number, number, number];\n  type: 'coin' | 'nft' | 'gem';\n}\n\nexport default function CollectibleSystem() {\n  // Pre-calculated collectible positions throughout the scene\n  const collectibles: CollectibleData[] = useMemo(() => [\n    // Around space station\n    { id: 'coin-1', position: [3, 4, 2], type: 'coin' },\n    { id: 'coin-2', position: [-3, 2, 4], type: 'coin' },\n    { id: 'coin-3', position: [2, -1, -3], type: 'coin' },\n    \n    // Near navigation portals\n    { id: 'gem-1', position: [8, 4, 2], type: 'gem' },\n    { id: 'gem-2', position: [-8, 3, 3], type: 'gem' },\n    { id: 'gem-3', position: [2, 4, 8], type: 'gem' },\n    { id: 'gem-4', position: [-1, 3, -8], type: 'gem' },\n    \n    // Hidden NFTs in more obscure locations\n    { id: 'nft-1', position: [12, 6, -8], type: 'nft' },\n    { id: 'nft-2', position: [-15, 2, 10], type: 'nft' },\n    { id: 'nft-3', position: [5, -3, 12], type: 'nft' },\n    \n    // Additional coins\n    { id: 'coin-4', position: [0, 8, 0], type: 'coin' },\n    { id: 'coin-5', position: [6, 1, -4], type: 'coin' },\n    { id: 'coin-6', position: [-4, 5, 1], type: 'coin' },\n    { id: 'coin-7', position: [1, 2, 6], type: 'coin' },\n    \n    // Secret rare NFT in hard to reach place\n    { id: 'nft-secret', position: [0, 15, 0], type: 'nft' }\n  ], []);\n\n  const [collectedItems, setCollectedItems] = useState<Set<string>>(new Set());\n  \n  const handleCollect = useCallback((id: string) => {\n    setCollectedItems(prev => new Set(Array.from(prev).concat(id)));\n  }, []);\n\n  // Calculate collection stats\n  const stats = useMemo(() => {\n    const collected = collectedItems.size;\n    const total = collectibles.length;\n    const coins = collectibles.filter(c => c.type === 'coin' && collectedItems.has(c.id)).length;\n    const gems = collectibles.filter(c => c.type === 'gem' && collectedItems.has(c.id)).length;\n    const nfts = collectibles.filter(c => c.type === 'nft' && collectedItems.has(c.id)).length;\n    \n    const points = coins * 10 + gems * 25 + nfts * 50;\n    \n    return { collected, total, coins, gems, nfts, points };\n  }, [collectibles, collectedItems]);\n\n  return (\n    <>\n      {/* Render all collectible tokens */}\n      {collectibles.map((collectible) => (\n        <CollectibleToken\n          key={collectible.id}\n          position={collectible.position}\n          type={collectible.type}\n          isCollected={collectedItems.has(collectible.id)}\n          onCollect={() => handleCollect(collectible.id)}\n        />\n      ))}\n\n      {/* Collection progress display */}\n      {stats.collected > 0 && (\n        <group position={[0, 10, 0]}>\n          <Text\n            fontSize={0.4}\n            color=\"#ffd700\"\n            anchorX=\"center\"\n            anchorY=\"middle\"\n            font=\"/fonts/inter.json\"\n          >\n            🏆 COLLECTION PROGRESS\n          </Text>\n          \n          <Text\n            position={[0, -0.6, 0]}\n            fontSize={0.25}\n            color=\"#ffffff\"\n            anchorX=\"center\"\n            anchorY=\"middle\"\n            font=\"/fonts/inter.json\"\n          >\n            {stats.collected}/{stats.total} items found\n          </Text>\n          \n          <Text\n            position={[0, -1, 0]}\n            fontSize={0.2}\n            color=\"#4fd1c7\"\n            anchorX=\"center\"\n            anchorY=\"middle\"\n            font=\"/fonts/inter.json\"\n          >\n            💰 {stats.coins} coins • 💎 {stats.gems} gems • 🎨 {stats.nfts} NFTs\n          </Text>\n          \n          <Text\n            position={[0, -1.4, 0]}\n            fontSize={0.2}\n            color=\"#ffd700\"\n            anchorX=\"center\"\n            anchorY=\"middle\"\n            font=\"/fonts/inter.json\"\n          >\n            Total Score: {stats.points} points\n          </Text>\n        </group>\n      )}\n\n      {/* Easter egg message for collecting all items */}\n      {stats.collected === stats.total && (\n        <group position={[0, 8, 0]}>\n          <Text\n            fontSize={0.5}\n            color=\"#ff6b6b\"\n            anchorX=\"center\"\n            anchorY=\"middle\"\n            font=\"/fonts/inter.json\"\n          >\n            🎉 MASTER COLLECTOR! 🎉\n          </Text>\n          \n          <Text\n            position={[0, -0.8, 0]}\n            fontSize={0.25}\n            color=\"#ffffff\"\n            anchorX=\"center\"\n            anchorY=\"middle\"\n            font=\"/fonts/inter.json\"\n          >\n            You've discovered all hidden treasures in WLSFX!\n          </Text>\n          \n          <Text\n            position={[0, -1.2, 0]}\n            fontSize={0.2}\n            color=\"#9f7aea\"\n            anchorX=\"center\"\n            anchorY=\"middle\"\n            font=\"/fonts/inter.json\"\n          >\n            Secret achievement unlocked: True Explorer\n          </Text>\n        </group>\n      )}\n\n      {/* Hint for first-time visitors */}\n      {stats.collected === 0 && (\n        <Text\n          position={[0, -8, 0]}\n          fontSize={0.2}\n          color=\"#4fd1c7\"\n          anchorX=\"center\"\n          anchorY=\"middle\"\n          font=\"/fonts/inter.json\"\n        >\n          💡 Explore the space to find hidden collectibles!\n        </Text>\n      )}\n\n      {/* Special GLTF Heart Model Easter Egg */}\n      {stats.collected >= 5 && (\n        <HeartModel\n          position={[0, 12, 0]}\n          scale={0.5}\n          color=\"#ff6b6b\"\n        />\n      )}\n    </>\n  );\n}","size_bytes":5606},"client/src/components/3d/CollectibleToken.tsx":{"content":"import { useFrame } from \"@react-three/fiber\";\nimport { Text } from \"@react-three/drei\";\nimport { useRef, useState, useMemo } from \"react\";\nimport * as THREE from \"three\";\nimport { useAudio } from \"../../lib/stores/useAudio\";\n\ninterface CollectibleTokenProps {\n  position: [number, number, number];\n  type: 'coin' | 'nft' | 'gem';\n  isCollected: boolean;\n  onCollect: () => void;\n}\n\nexport default function CollectibleToken({ \n  position, \n  type, \n  isCollected, \n  onCollect \n}: CollectibleTokenProps) {\n  const tokenRef = useRef<THREE.Group>(null);\n  const glowRef = useRef<THREE.Mesh>(null);\n  const [isHovered, setIsHovered] = useState(false);\n  const { playSuccess } = useAudio();\n\n  // Token properties based on type\n  const tokenData = useMemo(() => {\n    switch (type) {\n      case 'coin':\n        return {\n          color: '#ffd700',\n          emissive: '#ffaa00',\n          shape: 'cylinder',\n          size: 0.3,\n          label: '💰',\n          name: 'CRYPTO COIN',\n          points: 10\n        };\n      case 'nft':\n        return {\n          color: '#ff6b6b',\n          emissive: '#ff3333',\n          shape: 'octahedron',\n          size: 0.4,\n          label: '🎨',\n          name: 'RARE NFT',\n          points: 50\n        };\n      case 'gem':\n        return {\n          color: '#4fd1c7',\n          emissive: '#2dd4bf',\n          shape: 'dodecahedron',\n          size: 0.35,\n          label: '💎',\n          name: 'CRYSTAL GEM',\n          points: 25\n        };\n      default:\n        return {\n          color: '#ffffff',\n          emissive: '#cccccc',\n          shape: 'sphere',\n          size: 0.3,\n          label: '⭐',\n          name: 'TOKEN',\n          points: 5\n        };\n    }\n  }, [type]);\n\n  useFrame((state) => {\n    if (tokenRef.current && !isCollected) {\n      // Floating animation\n      tokenRef.current.position.y = position[1] + Math.sin(state.clock.elapsedTime * 2 + position[0]) * 0.2;\n      \n      // Rotation animation\n      tokenRef.current.rotation.y += 0.02;\n      tokenRef.current.rotation.x += 0.01;\n    }\n\n    if (glowRef.current && !isCollected) {\n      // Glow pulsing effect\n      const intensity = 0.5 + Math.sin(state.clock.elapsedTime * 3) * 0.3;\n      const material = glowRef.current.material as THREE.MeshBasicMaterial;\n      material.opacity = intensity;\n      \n      // Scale pulsing\n      const scale = 1 + Math.sin(state.clock.elapsedTime * 2) * 0.1;\n      glowRef.current.scale.setScalar(scale);\n    }\n  });\n\n  const handleCollect = () => {\n    if (!isCollected) {\n      playSuccess();\n      onCollect();\n    }\n  };\n\n  // Don't render if collected\n  if (isCollected) {\n    return null;\n  }\n\n  return (\n    <group \n      ref={tokenRef} \n      position={position}\n      onClick={handleCollect}\n      onPointerOver={() => {\n        setIsHovered(true);\n        document.body.style.cursor = 'pointer';\n      }}\n      onPointerOut={() => {\n        setIsHovered(false);\n        document.body.style.cursor = 'default';\n      }}\n    >\n      {/* Glow effect */}\n      <mesh ref={glowRef}>\n        <sphereGeometry args={[tokenData.size * 2, 16, 16]} />\n        <meshBasicMaterial\n          color={tokenData.emissive}\n          transparent\n          opacity={0.2}\n        />\n      </mesh>\n\n      {/* Main token geometry */}\n      <mesh castShadow>\n        {tokenData.shape === 'cylinder' && (\n          <cylinderGeometry args={[tokenData.size, tokenData.size, 0.1, 32]} />\n        )}\n        {tokenData.shape === 'octahedron' && (\n          <octahedronGeometry args={[tokenData.size]} />\n        )}\n        {tokenData.shape === 'dodecahedron' && (\n          <dodecahedronGeometry args={[tokenData.size]} />\n        )}\n        {tokenData.shape === 'sphere' && (\n          <sphereGeometry args={[tokenData.size, 32, 32]} />\n        )}\n        \n        <meshStandardMaterial\n          color={tokenData.color}\n          emissive={tokenData.emissive}\n          emissiveIntensity={0.3}\n          metalness={0.8}\n          roughness={0.1}\n        />\n      </mesh>\n\n      {/* Hover/Selection effects */}\n      {isHovered && (\n        <>\n          <mesh>\n            <torusGeometry args={[tokenData.size * 1.5, 0.02, 8, 32]} />\n            <meshBasicMaterial\n              color={tokenData.color}\n              transparent\n              opacity={0.8}\n            />\n          </mesh>\n          \n          {/* Floating label */}\n          <Text\n            position={[0, tokenData.size + 0.8, 0]}\n            fontSize={0.2}\n            color={tokenData.color}\n            anchorX=\"center\"\n            anchorY=\"middle\"\n            font=\"/fonts/inter.json\"\n          >\n            {tokenData.name}\n          </Text>\n          \n          <Text\n            position={[0, tokenData.size + 0.5, 0]}\n            fontSize={0.15}\n            color=\"#ffffff\"\n            anchorX=\"center\"\n            anchorY=\"middle\"\n            font=\"/fonts/inter.json\"\n          >\n            +{tokenData.points} pts\n          </Text>\n        </>\n      )}\n\n      {/* Particle trail effect */}\n      <mesh position={[0, -0.5, 0]}>\n        <cylinderGeometry args={[0, tokenData.size * 0.5, 1, 8]} />\n        <meshBasicMaterial\n          color={tokenData.emissive}\n          transparent\n          opacity={0.1}\n        />\n      </mesh>\n    </group>\n  );\n}","size_bytes":5267},"client/src/components/3d/ContactConsole.tsx":{"content":"import { useFrame } from \"@react-three/fiber\";\nimport { Text, useGLTF } from \"@react-three/drei\";\nimport { useRef, useState, useMemo } from \"react\";\nimport * as THREE from \"three\";\nimport { portfolioData } from \"../../lib/constants/portfolioData\";\n\nexport default function ContactConsole() {\n  const consoleRef = useRef<THREE.Group>(null);\n  const commandConsoleRef = useRef<THREE.Group>(null);\n  const buttonRefs = useRef<THREE.Mesh[]>([]);\n  const [selectedButton, setSelectedButton] = useState<number | null>(null);\n  \n  // Load the command console 3D model\n  const { scene } = useGLTF('/models/command_console.glb');\n  \n  // Clone the scene to avoid issues with multiple instances\n  const clonedScene = useMemo(() => scene.clone(), [scene]);\n\n  // Pre-calculate button positions for the futuristic console\n  const buttonPositions = useMemo(() => {\n    return portfolioData.contact.map((_, i) => ({\n      x: (i - portfolioData.contact.length / 2) * 1.2,\n      y: 1.5,\n      z: 2\n    }));\n  }, []);\n\n  useFrame((state) => {\n    if (consoleRef.current) {\n      consoleRef.current.position.y = Math.sin(state.clock.elapsedTime * 0.5) * 0.1;\n    }\n\n    if (commandConsoleRef.current) {\n      // Console subtle animation\n      commandConsoleRef.current.position.y = Math.sin(state.clock.elapsedTime * 0.3) * 0.05;\n      commandConsoleRef.current.rotation.y = Math.sin(state.clock.elapsedTime * 0.1) * 0.02;\n    }\n\n    buttonRefs.current.forEach((button, i) => {\n      if (button) {\n        const targetScale = selectedButton === i ? 1.3 : 1;\n        button.scale.lerp(new THREE.Vector3(targetScale, targetScale, targetScale), 0.1);\n        \n        // Floating button animation\n        button.position.y = buttonPositions[i].y + Math.sin(state.clock.elapsedTime + i) * 0.05;\n      }\n    });\n  });\n\n  const handleButtonClick = (contact: any) => {\n    if (contact.type === 'email') {\n      window.location.href = `mailto:${contact.value}`;\n    } else {\n      window.open(contact.value, '_blank');\n    }\n  };\n\n  return (\n    <group ref={consoleRef} position={[0, 0, -8]}>\n      <Text\n        position={[0, 4, 0]}\n        fontSize={1}\n        color=\"#4ecdc4\"\n        anchorX=\"center\"\n        anchorY=\"middle\"\n        font=\"/fonts/inter.json\"\n      >\n        CONTACT\n      </Text>\n\n      {/* Command Console 3D Model */}\n      <group \n        ref={commandConsoleRef}\n        scale={[2.5, 2.5, 2.5]}\n        position={[0, 0, 0]}\n      >\n        <primitive \n          object={clonedScene} \n          castShadow \n          receiveShadow\n        />\n      </group>\n\n      {/* Holographic interface display */}\n      <group position={[0, 2, 2]}>\n        <Text\n          position={[0, 0.5, 0]}\n          fontSize={0.2}\n          color=\"#4ecdc4\"\n          anchorX=\"center\"\n          anchorY=\"middle\"\n          font=\"/fonts/inter.json\"\n        >\n          COMMUNICATION TERMINAL\n        </Text>\n\n        <Text\n          position={[0, 0.1, 0]}\n          fontSize={0.15}\n          color=\"#ffffff\"\n          anchorX=\"center\"\n          anchorY=\"middle\"\n          font=\"/fonts/inter.json\"\n        >\n          Select a communication channel:\n        </Text>\n      </group>\n\n      {/* Enhanced Futuristic Contact Buttons */}\n      {portfolioData.contact.map((contact, i) => {\n        const pos = buttonPositions[i];\n        return (\n          <group key={i} position={[pos.x, pos.y, pos.z]}>\n            {/* Main interactive button */}\n            <mesh\n              ref={(el) => {\n                if (el) buttonRefs.current[i] = el;\n              }}\n              onClick={() => handleButtonClick(contact)}\n              onPointerOver={() => {\n                setSelectedButton(i);\n                document.body.style.cursor = 'pointer';\n              }}\n              onPointerOut={() => {\n                setSelectedButton(null);\n                document.body.style.cursor = 'default';\n              }}\n              castShadow\n            >\n              <dodecahedronGeometry args={[0.3]} />\n              <meshStandardMaterial\n                color={contact.color}\n                emissive={contact.color}\n                emissiveIntensity={selectedButton === i ? 0.8 : 0.4}\n                metalness={0.8}\n                roughness={0.2}\n                transparent\n                opacity={0.9}\n              />\n            </mesh>\n\n            {/* Holographic button ring */}\n            <mesh position={[0, 0, 0]}>\n              <torusGeometry args={[0.5, 0.05, 8, 32]} />\n              <meshBasicMaterial\n                color={contact.color}\n                transparent\n                opacity={selectedButton === i ? 0.8 : 0.4}\n              />\n            </mesh>\n\n            {/* Contact label */}\n            <Text\n              position={[0, -0.8, 0]}\n              fontSize={0.12}\n              color=\"#ffffff\"\n              anchorX=\"center\"\n              anchorY=\"middle\"\n              font=\"/fonts/inter.json\"\n            >\n              {contact.label}\n            </Text>\n\n            {/* Button type indicator */}\n            <Text\n              position={[0, -1, 0]}\n              fontSize={0.08}\n              color={contact.color}\n              anchorX=\"center\"\n              anchorY=\"middle\"\n              font=\"/fonts/inter.json\"\n            >\n              {contact.type === 'email' ? '📧' : '🔗'} {contact.type.toUpperCase()}\n            </Text>\n\n            {/* Energy streams from buttons */}\n            {selectedButton === i && (\n              <group>\n                {Array.from({ length: 6 }).map((_, j) => {\n                  const streamAngle = (j / 6) * Math.PI * 2;\n                  return (\n                    <mesh\n                      key={j}\n                      position={[\n                        Math.cos(streamAngle) * 0.8,\n                        0,\n                        Math.sin(streamAngle) * 0.8\n                      ]}\n                      rotation={[0, streamAngle, 0]}\n                    >\n                      <cylinderGeometry args={[0.01, 0.01, 0.3, 8]} />\n                      <meshBasicMaterial\n                        color={contact.color}\n                        transparent\n                        opacity={0.6}\n                      />\n                    </mesh>\n                  );\n                })}\n              </group>\n            )}\n          </group>\n        );\n      })}\n\n      {/* Status indicators and data streams */}\n      <group position={[0, 3, 0]}>\n        {Array.from({ length: 8 }).map((_, i) => {\n          const angle = (i / 8) * Math.PI * 2;\n          const radius = 4;\n          return (\n            <mesh\n              key={i}\n              position={[\n                Math.cos(angle) * radius,\n                Math.sin(angle * 0.5) * 0.5,\n                Math.sin(angle) * radius\n              ]}\n            >\n              <sphereGeometry args={[0.04, 8, 8]} />\n              <meshBasicMaterial\n                color={i % 3 === 0 ? \"#4ecdc4\" : i % 3 === 1 ? \"#45b7d1\" : \"#ff6b6b\"}\n                transparent\n                opacity={0.7}\n              />\n            </mesh>\n          );\n        })}\n      </group>\n\n      {/* Communication status display */}\n      <Text\n        position={[0, -2, 2]}\n        fontSize={0.1}\n        color=\"#4ecdc4\"\n        anchorX=\"center\"\n        anchorY=\"middle\"\n        font=\"/fonts/inter.json\"\n      >\n        SYSTEM STATUS: ONLINE | COMMUNICATIONS: ACTIVE | ENCRYPTION: ENABLED\n      </Text>\n    </group>\n  );\n}\n\n// Preload the model\nuseGLTF.preload('/models/command_console.glb');\n","size_bytes":7508},"client/src/components/3d/HeartModel.tsx":{"content":"import { useGLTF } from \"@react-three/drei\";\nimport { useFrame } from \"@react-three/fiber\";\nimport { useRef } from \"react\";\nimport * as THREE from \"three\";\n\ninterface HeartModelProps {\n  position: [number, number, number];\n  scale?: number;\n  color?: string;\n}\n\nexport default function HeartModel({ \n  position, \n  scale = 1, \n  color = \"#ff6b6b\" \n}: HeartModelProps) {\n  const heartRef = useRef<THREE.Group>(null);\n  const { scene } = useGLTF(\"/geometries/heart.gltf\");\n\n  useFrame((state) => {\n    if (heartRef.current) {\n      // Gentle floating animation\n      heartRef.current.position.y = position[1] + Math.sin(state.clock.elapsedTime * 2) * 0.1;\n      \n      // Gentle rotation\n      heartRef.current.rotation.y += 0.01;\n      \n      // Pulsing scale effect\n      const pulseScale = scale + Math.sin(state.clock.elapsedTime * 3) * 0.1;\n      heartRef.current.scale.setScalar(pulseScale);\n    }\n  });\n\n  return (\n    <group ref={heartRef} position={position}>\n      <primitive \n        object={scene.clone()} \n        scale={scale}\n      />\n    </group>\n  );\n}\n\nuseGLTF.preload(\"/geometries/heart.gltf\");","size_bytes":1111},"client/src/components/3d/InteractiveLaptop.tsx":{"content":"import { useFrame } from \"@react-three/fiber\";\nimport { Text, useGLTF } from \"@react-three/drei\";\nimport { useRef, useState, useMemo } from \"react\";\nimport * as THREE from \"three\";\n\ninterface InteractiveLaptopProps {\n  position: [number, number, number];\n  project: {\n    id: number;\n    title: string;\n    description: string;\n    tech: string[];\n    color: string;\n    type: string;\n  };\n  isSelected: boolean;\n  onClick: () => void;\n}\n\nexport default function InteractiveLaptop({ \n  position, \n  project, \n  isSelected, \n  onClick \n}: InteractiveLaptopProps) {\n  const laptopRef = useRef<THREE.Group>(null);\n  const cubeRef = useRef<THREE.Group>(null);\n  const [isHovered, setIsHovered] = useState(false);\n  \n  // Load the gallery cubes 3D model\n  const { scene } = useGLTF('/models/gallery_cubes.glb');\n  \n  // Clone the scene to avoid issues with multiple instances\n  const clonedScene = useMemo(() => scene.clone(), [scene]);\n\n  useFrame((state) => {\n    if (laptopRef.current) {\n      // Floating animation\n      laptopRef.current.position.y = position[1] + Math.sin(state.clock.elapsedTime + position[0]) * 0.1;\n      \n      // Gentle rotation\n      laptopRef.current.rotation.y = Math.sin(state.clock.elapsedTime * 0.5) * 0.1;\n    }\n\n    if (cubeRef.current) {\n      // Gallery cube rotation and expansion\n      cubeRef.current.rotation.y += 0.01;\n      cubeRef.current.rotation.x = Math.sin(state.clock.elapsedTime * 0.3) * 0.1;\n      \n      // Scale effect when selected or hovered\n      const targetScale = isSelected ? 1.3 : isHovered ? 1.1 : 1;\n      cubeRef.current.scale.lerp(new THREE.Vector3(targetScale, targetScale, targetScale), 0.1);\n    }\n  });\n\n  return (\n    <group \n      ref={laptopRef} \n      position={position}\n      onClick={onClick}\n      onPointerOver={() => {\n        setIsHovered(true);\n        document.body.style.cursor = 'pointer';\n      }}\n      onPointerOut={() => {\n        setIsHovered(false);\n        document.body.style.cursor = 'default';\n      }}\n    >\n      {/* Gallery Cube 3D Model */}\n      <group \n        ref={cubeRef}\n        scale={[1.5, 1.5, 1.5]}\n        position={[0, 0, 0]}\n      >\n        <primitive \n          object={clonedScene} \n          castShadow \n          receiveShadow\n        />\n      </group>\n\n      {/* Project Information Display */}\n      <group position={[0, 2, 0]}>\n        <Text\n          position={[0, 0, 0]}\n          fontSize={0.2}\n          color={project.color}\n          anchorX=\"center\"\n          anchorY=\"middle\"\n          font=\"/fonts/inter.json\"\n          maxWidth={3}\n        >\n          {project.title}\n        </Text>\n\n        <Text\n          position={[0, -0.3, 0]}\n          fontSize={0.12}\n          color=\"#ffffff\"\n          anchorX=\"center\"\n          anchorY=\"middle\"\n          font=\"/fonts/inter.json\"\n        >\n          {project.type.toUpperCase()}\n        </Text>\n      </group>\n\n      {/* Hover/Selection Effects */}\n      {(isHovered || isSelected) && (\n        <mesh position={[0, -1, 0]}>\n          <cylinderGeometry args={[2, 2, 0.1, 32]} />\n          <meshBasicMaterial\n            color={project.color}\n            transparent\n            opacity={0.3}\n          />\n        </mesh>\n      )}\n\n      {/* Holographic energy rings around cube */}\n      {(isHovered || isSelected) && (\n        <group>\n          {Array.from({ length: 3 }).map((_, i) => (\n            <mesh key={i} position={[0, i * 0.5 - 1, 0]} rotation={[0, 0, 0]}>\n              <torusGeometry args={[1.5 + i * 0.3, 0.05, 8, 32]} />\n              <meshBasicMaterial\n                color={project.color}\n                transparent\n                opacity={0.4 - i * 0.1}\n              />\n            </mesh>\n          ))}\n        </group>\n      )}\n\n      {/* Expanded Project Details */}\n      {isSelected && (\n        <group position={[0, -2.5, 0]}>\n          {/* Holographic info panel */}\n          <mesh>\n            <planeGeometry args={[5, 2]} />\n            <meshBasicMaterial \n              color=\"#1a202c\" \n              transparent \n              opacity={0.8} \n            />\n          </mesh>\n          \n          {/* Glowing border */}\n          <mesh position={[0, 0, -0.01]}>\n            <planeGeometry args={[5.1, 2.1]} />\n            <meshBasicMaterial \n              color={project.color} \n              transparent \n              opacity={0.3} \n            />\n          </mesh>\n          \n          <Text\n            position={[0, 0.5, 0.01]}\n            fontSize={0.14}\n            color=\"#ffffff\"\n            anchorX=\"center\"\n            anchorY=\"middle\"\n            font=\"/fonts/inter.json\"\n            maxWidth={4.5}\n          >\n            {project.description}\n          </Text>\n\n          <Text\n            position={[0, 0, 0.01]}\n            fontSize={0.11}\n            color={project.color}\n            anchorX=\"center\"\n            anchorY=\"middle\"\n            font=\"/fonts/inter.json\"\n          >\n            Tech Stack: {project.tech.join(', ')}\n          </Text>\n\n          <Text\n            position={[0, -0.5, 0.01]}\n            fontSize={0.09}\n            color=\"#4fd1c7\"\n            anchorX=\"center\"\n            anchorY=\"middle\"\n            font=\"/fonts/inter.json\"\n          >\n            ▶ Click to explore interactive demo\n          </Text>\n        </group>\n      )}\n    </group>\n  );\n}\n\n// Preload the model\nuseGLTF.preload('/models/gallery_cubes.glb');","size_bytes":5365},"client/src/components/3d/NavigationPortals.tsx":{"content":"import { useFrame } from \"@react-three/fiber\";\nimport { Text } from \"@react-three/drei\";\nimport { useRef, useState, useMemo, Suspense } from \"react\";\nimport * as THREE from \"three\";\nimport { usePortfolio } from \"../../lib/stores/usePortfolio\";\nimport { useAudio } from \"../../lib/stores/useAudio\";\n\ninterface Portal {\n  id: string;\n  label: string;\n  position: [number, number, number];\n  color: string;\n  section: string;\n}\n\nexport default function NavigationPortals() {\n  const { setCurrentSection, currentSection } = usePortfolio();\n  const { playNavigationSound, playSuccess } = useAudio();\n  const portalRefs = useRef<{ [key: string]: THREE.Group }>({});\n  const [hoveredPortal, setHoveredPortal] = useState<string | null>(null);\n\n  // Pre-calculate portal data\n  const portals: Portal[] = useMemo(() => [\n    {\n      id: 'about',\n      label: 'ABOUT',\n      position: [6, 2, 0],\n      color: '#4fd1c7',\n      section: 'about'\n    },\n    {\n      id: 'projects',\n      label: 'PROJECTS',\n      position: [-6, 2, 0],\n      color: '#9f7aea',\n      section: 'projects'\n    },\n    {\n      id: 'skills',\n      label: 'SKILLS',\n      position: [0, 2, 6],\n      color: '#f093fb',\n      section: 'skills'\n    },\n    {\n      id: 'contact',\n      label: 'CONTACT',\n      position: [0, 2, -6],\n      color: '#4ecdc4',\n      section: 'contact'\n    }\n  ], []);\n\n  useFrame((state) => {\n    portals.forEach((portal) => {\n      const portalGroup = portalRefs.current[portal.id];\n      if (portalGroup) {\n        // Floating animation\n        portalGroup.position.y = portal.position[1] + Math.sin(state.clock.elapsedTime + portal.position[0]) * 0.2;\n        \n        // Rotation\n        portalGroup.rotation.y += 0.01;\n        \n        // Scale animation when hovered\n        const targetScale = hoveredPortal === portal.id ? 1.2 : 1;\n        portalGroup.scale.lerp(new THREE.Vector3(targetScale, targetScale, targetScale), 0.1);\n      }\n    });\n  });\n\n  const handlePortalClick = (section: string) => {\n    playSuccess(); // Play success sound for navigation\n    setCurrentSection(section);\n  };\n\n  const handlePortalHover = (portalId: string) => {\n    playNavigationSound(); // Play navigation sound on hover\n    setHoveredPortal(portalId);\n  };\n\n  return (\n    <group>\n      {portals.map((portal) => (\n        <group\n          key={portal.id}\n          ref={(el) => {\n            if (el) portalRefs.current[portal.id] = el;\n          }}\n          position={portal.position}\n          onClick={() => handlePortalClick(portal.section)}\n          onPointerOver={() => handlePortalHover(portal.id)}\n          onPointerOut={() => setHoveredPortal(null)}\n        >\n          {/* Portal ring */}\n          <mesh>\n            <torusGeometry args={[1, 0.1, 8, 32]} />\n            <meshStandardMaterial\n              color={portal.color}\n              emissive={portal.color}\n              emissiveIntensity={currentSection === portal.section ? 0.5 : 0.2}\n              metalness={0.8}\n              roughness={0.2}\n            />\n          </mesh>\n\n          {/* Portal center glow */}\n          <mesh>\n            <circleGeometry args={[0.8, 32]} />\n            <meshBasicMaterial\n              color={portal.color}\n              transparent\n              opacity={currentSection === portal.section ? 0.3 : 0.1}\n              side={THREE.DoubleSide}\n            />\n          </mesh>\n\n          {/* Portal label */}\n          <Suspense fallback={null}>\n            <Text\n              position={[0, -1.5, 0]}\n              fontSize={0.3}\n              color={portal.color}\n              anchorX=\"center\"\n              anchorY=\"middle\"\n              font=\"/fonts/inter.json\"\n            >\n              {portal.label}\n            </Text>\n          </Suspense>\n\n          {/* Active indicator */}\n          {currentSection === portal.section && (\n            <mesh position={[0, 0, 0.1]}>\n              <sphereGeometry args={[0.1, 16, 16]} />\n              <meshBasicMaterial color={portal.color} />\n            </mesh>\n          )}\n        </group>\n      ))}\n    </group>\n  );\n}\n","size_bytes":4061},"client/src/components/3d/ParticleEffects.tsx":{"content":"import { useFrame } from \"@react-three/fiber\";\nimport { useRef, useMemo } from \"react\";\nimport * as THREE from \"three\";\n\nexport default function ParticleEffects() {\n  const particlesRef = useRef<THREE.Points>(null);\n  const cyberpunkParticlesRef = useRef<THREE.Points>(null);\n\n  // Create floating data particles\n  const { positions: dataPositions, velocities: dataVelocities } = useMemo(() => {\n    const particleCount = 200;\n    const positions = new Float32Array(particleCount * 3);\n    const velocities = new Float32Array(particleCount * 3);\n\n    for (let i = 0; i < particleCount; i++) {\n      const i3 = i * 3;\n      \n      // Random positions in a large sphere around the scene\n      const radius = 20 + Math.random() * 30;\n      const theta = Math.random() * Math.PI * 2;\n      const phi = Math.acos(Math.random() * 2 - 1);\n      \n      positions[i3] = radius * Math.sin(phi) * Math.cos(theta);\n      positions[i3 + 1] = radius * Math.sin(phi) * Math.sin(theta);\n      positions[i3 + 2] = radius * Math.cos(phi);\n\n      // Random velocities for floating motion\n      velocities[i3] = (Math.random() - 0.5) * 0.02;\n      velocities[i3 + 1] = (Math.random() - 0.5) * 0.02;\n      velocities[i3 + 2] = (Math.random() - 0.5) * 0.02;\n    }\n\n    return { positions, velocities };\n  }, []);\n\n  // Create cyberpunk grid particles\n  const { positions: gridPositions, colors: gridColors } = useMemo(() => {\n    const particleCount = 100;\n    const positions = new Float32Array(particleCount * 3);\n    const colors = new Float32Array(particleCount * 3);\n\n    for (let i = 0; i < particleCount; i++) {\n      const i3 = i * 3;\n      \n      // Grid-like positions\n      const x = (Math.random() - 0.5) * 60;\n      const y = -10 + Math.random() * 5;\n      const z = (Math.random() - 0.5) * 60;\n      \n      positions[i3] = x;\n      positions[i3 + 1] = y;\n      positions[i3 + 2] = z;\n\n      // Cyberpunk colors - cyan, purple, pink\n      const colorChoice = Math.random();\n      if (colorChoice < 0.4) {\n        // Cyan\n        colors[i3] = 0.3;\n        colors[i3 + 1] = 0.8;\n        colors[i3 + 2] = 1;\n      } else if (colorChoice < 0.7) {\n        // Purple\n        colors[i3] = 0.6;\n        colors[i3 + 1] = 0.4;\n        colors[i3 + 2] = 0.9;\n      } else {\n        // Pink\n        colors[i3] = 1;\n        colors[i3 + 1] = 0.3;\n        colors[i3 + 2] = 0.8;\n      }\n    }\n\n    return { positions, colors };\n  }, []);\n\n  useFrame((state) => {\n    // Animate floating data particles\n    if (particlesRef.current) {\n      const positions = particlesRef.current.geometry.attributes.position.array as Float32Array;\n      \n      for (let i = 0; i < positions.length; i += 3) {\n        positions[i] += dataVelocities[i];\n        positions[i + 1] += dataVelocities[i + 1];\n        positions[i + 2] += dataVelocities[i + 2];\n\n        // Wrap particles around the scene\n        if (Math.abs(positions[i]) > 50) dataVelocities[i] *= -1;\n        if (Math.abs(positions[i + 1]) > 50) dataVelocities[i + 1] *= -1;\n        if (Math.abs(positions[i + 2]) > 50) dataVelocities[i + 2] *= -1;\n      }\n      \n      particlesRef.current.geometry.attributes.position.needsUpdate = true;\n    }\n\n    // Animate cyberpunk grid particles\n    if (cyberpunkParticlesRef.current) {\n      cyberpunkParticlesRef.current.rotation.y += 0.001;\n      const positions = cyberpunkParticlesRef.current.geometry.attributes.position.array as Float32Array;\n      \n      for (let i = 1; i < positions.length; i += 3) {\n        positions[i] += Math.sin(state.clock.elapsedTime + positions[i]) * 0.01;\n      }\n      \n      cyberpunkParticlesRef.current.geometry.attributes.position.needsUpdate = true;\n    }\n  });\n\n  return (\n    <>\n      {/* Floating data particles */}\n      <points ref={particlesRef}>\n        <bufferGeometry>\n          <bufferAttribute\n            attach=\"attributes-position\"\n            count={dataPositions.length / 3}\n            array={dataPositions}\n            itemSize={3}\n          />\n        </bufferGeometry>\n        <pointsMaterial\n          size={0.8}\n          color=\"#4fd1c7\"\n          transparent\n          opacity={0.6}\n          sizeAttenuation={true}\n          alphaTest={0.1}\n        />\n      </points>\n\n      {/* Cyberpunk grid particles */}\n      <points ref={cyberpunkParticlesRef}>\n        <bufferGeometry>\n          <bufferAttribute\n            attach=\"attributes-position\"\n            count={gridPositions.length / 3}\n            array={gridPositions}\n            itemSize={3}\n          />\n          <bufferAttribute\n            attach=\"attributes-color\"\n            count={gridColors.length / 3}\n            array={gridColors}\n            itemSize={3}\n          />\n        </bufferGeometry>\n        <pointsMaterial\n          size={0.5}\n          vertexColors\n          transparent\n          opacity={0.4}\n          sizeAttenuation={false}\n          alphaTest={0.1}\n        />\n      </points>\n\n      {/* Energy streams */}\n      {[0, 1, 2].map((i) => (\n        <mesh key={i} position={[i * 15 - 15, 0, 0]}>\n          <cylinderGeometry args={[0.05, 0.05, 20, 8]} />\n          <meshBasicMaterial\n            color={i === 0 ? \"#4fd1c7\" : i === 1 ? \"#9f7aea\" : \"#f093fb\"}\n            transparent\n            opacity={0.3}\n          />\n        </mesh>\n      ))}\n\n      {/* Floating holographic panels */}\n      {[0, 1, 2, 3].map((i) => {\n        const angle = (i / 4) * Math.PI * 2;\n        const radius = 25;\n        const x = Math.cos(angle) * radius;\n        const z = Math.sin(angle) * radius;\n        \n        return (\n          <mesh \n            key={i} \n            position={[x, 3 + Math.sin(i) * 2, z]}\n            rotation={[0, -angle, 0]}\n          >\n            <planeGeometry args={[2, 3]} />\n            <meshBasicMaterial\n              color={i % 2 === 0 ? \"#4fd1c7\" : \"#9f7aea\"}\n              transparent\n              opacity={0.1}\n              side={THREE.DoubleSide}\n            />\n          </mesh>\n        );\n      })}\n    </>\n  );\n}","size_bytes":5949},"client/src/components/3d/ProjectShowcase.tsx":{"content":"import { useFrame } from \"@react-three/fiber\";\nimport { Text } from \"@react-three/drei\";\nimport { useRef, useState, useMemo } from \"react\";\nimport * as THREE from \"three\";\nimport { portfolioData } from \"../../lib/constants/portfolioData\";\nimport InteractiveLaptop from \"./InteractiveLaptop\";\nimport ArcadeCabinet from \"./ArcadeCabinet\";\nimport { useAudio } from \"../../lib/stores/useAudio\";\n\nexport default function ProjectShowcase() {\n  const groupRef = useRef<THREE.Group>(null);\n  const [selectedProject, setSelectedProject] = useState<number | null>(null);\n  const { playSuccess, playNavigationSound } = useAudio();\n\n  // Pre-calculate project positions\n  const projectPositions = useMemo(() => {\n    return portfolioData.projects.map((_, i) => ({\n      x: (i - portfolioData.projects.length / 2) * 6,\n      y: 0,\n      z: -5\n    }));\n  }, []);\n\n  useFrame((state) => {\n    if (groupRef.current) {\n      groupRef.current.rotation.y = Math.sin(state.clock.elapsedTime * 0.1) * 0.05;\n    }\n  });\n\n  const handleProjectClick = (projectIndex: number) => {\n    playSuccess();\n    setSelectedProject(selectedProject === projectIndex ? null : projectIndex);\n  };\n\n  return (\n    <group ref={groupRef} position={[-8, 0, 0]}>\n      <Text\n        position={[portfolioData.projects.length * 2, 6, -5]}\n        fontSize={1.2}\n        color=\"#9f7aea\"\n        anchorX=\"center\"\n        anchorY=\"middle\"\n        font=\"/fonts/inter.json\"\n      >\n        PROJECT SHOWCASE\n      </Text>\n\n      {portfolioData.projects.map((project, i) => {\n        const pos = projectPositions[i];\n        \n        // Use different 3D models based on project type\n        if (project.type === 'game') {\n          return (\n            <ArcadeCabinet\n              key={i}\n              position={[pos.x, pos.y, pos.z] as [number, number, number]}\n              project={project}\n              isSelected={selectedProject === i}\n              onClick={() => handleProjectClick(i)}\n            />\n          );\n        } else {\n          return (\n            <InteractiveLaptop\n              key={i}\n              position={[pos.x, pos.y, pos.z] as [number, number, number]}\n              project={project}\n              isSelected={selectedProject === i}\n              onClick={() => handleProjectClick(i)}\n            />\n          );\n        }\n      })}\n\n      {/* Interactive hint */}\n      <Text\n        position={[0, -5, -3]}\n        fontSize={0.3}\n        color=\"#4fd1c7\"\n        anchorX=\"center\"\n        anchorY=\"middle\"\n        font=\"/fonts/inter.json\"\n      >\n        Click on projects to explore interactive demos\n      </Text>\n    </group>\n  );\n}\n","size_bytes":2622},"client/src/components/3d/Scene.tsx":{"content":"import { OrbitControls } from \"@react-three/drei\";\nimport { Suspense, useEffect } from \"react\";\n\n// Import all 3D components\nimport SpaceStation from \"./SpaceStation\";\nimport NavigationPortals from \"./NavigationPortals\";\nimport StarField from \"./StarField\";\nimport AboutTerminal from \"./AboutTerminal\";\nimport ProjectShowcase from \"./ProjectShowcase\";\nimport SkillsHologram from \"./SkillsHologram\";\nimport ContactConsole from \"./ContactConsole\";\nimport CollectibleSystem from \"./CollectibleSystem\";\nimport ParticleEffects from \"./ParticleEffects\";\n\n// Import stores\nimport { usePortfolio } from \"../../lib/stores/usePortfolio\";\n\nexport default function Scene() {\n  const { currentSection, setLoading } = usePortfolio();\n\n  useEffect(() => {\n    // Mark loading as complete when scene mounts\n    const timer = setTimeout(() => {\n      setLoading(false);\n    }, 1000);\n    \n    return () => clearTimeout(timer);\n  }, [setLoading]);\n\n  return (\n    <>\n      {/* Advanced lighting setup */}\n      <ambientLight intensity={0.3} />\n      <directionalLight \n        position={[10, 10, 5]} \n        intensity={1}\n        castShadow\n        shadow-mapSize-width={2048}\n        shadow-mapSize-height={2048}\n      />\n      <pointLight position={[0, 10, 0]} intensity={0.5} color=\"#4fd1c7\" />\n      <pointLight position={[-10, -10, -10]} intensity={0.3} color=\"#9f7aea\" />\n      \n      {/* Background star field */}\n      <StarField />\n      \n      {/* Particle effects */}\n      <ParticleEffects />\n\n      {/* Main 3D portfolio components - render safely */}\n      {/* Central space station hub */}\n      <Suspense fallback={null}>\n        <SpaceStation position={[0, 0, 0]} />\n      </Suspense>\n      \n      {/* Navigation portals */}\n      <Suspense fallback={null}>\n        <NavigationPortals />\n      </Suspense>\n      \n      {/* Collectible system */}\n      <Suspense fallback={null}>\n        <CollectibleSystem />\n      </Suspense>\n      \n      {/* Section-specific components - wrapped individually */}\n      {currentSection === 'about' && (\n        <Suspense fallback={null}>\n          <AboutTerminal />\n        </Suspense>\n      )}\n      {currentSection === 'projects' && (\n        <Suspense fallback={null}>\n          <ProjectShowcase />\n        </Suspense>\n      )}\n      {currentSection === 'skills' && (\n        <Suspense fallback={null}>\n          <SkillsHologram />\n        </Suspense>\n      )}\n      {currentSection === 'contact' && (\n        <Suspense fallback={null}>\n          <ContactConsole />\n        </Suspense>\n      )}\n\n      {/* Camera controls */}\n      <OrbitControls\n        enableZoom={true}\n        enablePan={true}\n        enableRotate={true}\n        minDistance={8}\n        maxDistance={30}\n        maxPolarAngle={Math.PI * 0.75}\n        minPolarAngle={Math.PI * 0.25}\n        autoRotate={currentSection === 'home'}\n        autoRotateSpeed={0.5}\n      />\n    </>\n  );\n}\n","size_bytes":2892},"client/src/components/3d/SkillsHologram.tsx":{"content":"import { useFrame } from \"@react-three/fiber\";\nimport { Text, useGLTF } from \"@react-three/drei\";\nimport { useRef, useMemo } from \"react\";\nimport * as THREE from \"three\";\nimport { portfolioData } from \"../../lib/constants/portfolioData\";\n\nexport default function SkillsHologram() {\n  const groupRef = useRef<THREE.Group>(null);\n  const hologramRef = useRef<THREE.Group>(null);\n  const skillRefs = useRef<THREE.Mesh[]>([]);\n  \n  // Load the hologram projector 3D model\n  const { scene } = useGLTF('/models/hologram_projector.glb');\n  \n  // Clone the scene to avoid issues with multiple instances\n  const clonedScene = useMemo(() => scene.clone(), [scene]);\n\n  // Pre-calculate skill positions in a spiral\n  const skillPositions = useMemo(() => {\n    const skills = portfolioData.skills;\n    return skills.map((_, i) => {\n      const angle = (i / skills.length) * Math.PI * 2;\n      const radius = 3;\n      const height = Math.sin(i * 0.5) * 2;\n      \n      return {\n        x: Math.cos(angle) * radius,\n        y: height,\n        z: Math.sin(angle) * radius,\n        angle\n      };\n    });\n  }, []);\n\n  useFrame((state) => {\n    if (groupRef.current) {\n      groupRef.current.rotation.y += 0.008;\n    }\n\n    if (hologramRef.current) {\n      // Hologram projector subtle animation\n      hologramRef.current.position.y = Math.sin(state.clock.elapsedTime * 0.5) * 0.1;\n      hologramRef.current.rotation.y += 0.005;\n    }\n\n    skillRefs.current.forEach((skill, i) => {\n      if (skill) {\n        const pos = skillPositions[i];\n        // Individual rotation\n        skill.rotation.y += 0.02;\n        skill.rotation.x = Math.sin(state.clock.elapsedTime + pos.angle) * 0.2;\n        \n        // Floating animation\n        skill.position.y = pos.y + Math.sin(state.clock.elapsedTime + i) * 0.3;\n      }\n    });\n  });\n\n  return (\n    <group ref={groupRef} position={[0, 0, 8]}>\n      <Text\n        position={[0, 6, 0]}\n        fontSize={1}\n        color=\"#f093fb\"\n        anchorX=\"center\"\n        anchorY=\"middle\"\n        font=\"/fonts/inter.json\"\n      >\n        SKILLS\n      </Text>\n\n      {/* Hologram Projector 3D Model */}\n      <group \n        ref={hologramRef}\n        scale={[2.5, 2.5, 2.5]}\n        position={[0, -1, 0]}\n      >\n        <primitive \n          object={clonedScene} \n          castShadow \n          receiveShadow\n        />\n      </group>\n\n      {/* Enhanced Holographic Skills Display */}\n      {portfolioData.skills.map((skill, i) => {\n        const pos = skillPositions[i];\n        return (\n          <group key={i} position={[pos.x, pos.y, pos.z]}>\n            {/* Tech icon representation */}\n            <mesh\n              ref={(el) => {\n                if (el) skillRefs.current[i] = el;\n              }}\n            >\n              <dodecahedronGeometry args={[0.4]} />\n              <meshStandardMaterial\n                color={skill.color}\n                emissive={skill.color}\n                emissiveIntensity={0.4}\n                transparent\n                opacity={0.85}\n                wireframe={false}\n              />\n            </mesh>\n\n            {/* Holographic wireframe overlay */}\n            <mesh\n              position={[0, 0, 0]}\n              scale={[1.1, 1.1, 1.1]}\n            >\n              <dodecahedronGeometry args={[0.4]} />\n              <meshBasicMaterial\n                color={skill.color}\n                wireframe={true}\n                transparent\n                opacity={0.3}\n              />\n            </mesh>\n\n            {/* Skill name with holographic effect */}\n            <Text\n              position={[0, -0.9, 0]}\n              fontSize={0.18}\n              color=\"#ffffff\"\n              anchorX=\"center\"\n              anchorY=\"middle\"\n              font=\"/fonts/inter.json\"\n            >\n              {skill.name}\n            </Text>\n\n            {/* Level indicator */}\n            <Text\n              position={[0, -1.2, 0]}\n              fontSize={0.12}\n              color={skill.color}\n              anchorX=\"center\"\n              anchorY=\"middle\"\n              font=\"/fonts/inter.json\"\n            >\n              {skill.level}\n            </Text>\n\n            {/* Orbiting particles */}\n            {Array.from({ length: 3 }).map((_, j) => {\n              const orbitAngle = (j / 3) * Math.PI * 2;\n              const orbitRadius = 0.7;\n              return (\n                <mesh\n                  key={j}\n                  position={[\n                    Math.cos(orbitAngle) * orbitRadius,\n                    Math.sin(orbitAngle * 0.5) * 0.2,\n                    Math.sin(orbitAngle) * orbitRadius\n                  ]}\n                >\n                  <sphereGeometry args={[0.02, 8, 8]} />\n                  <meshBasicMaterial\n                    color={skill.color}\n                    transparent\n                    opacity={0.6}\n                  />\n                </mesh>\n              );\n            })}\n          </group>\n        );\n      })}\n\n      {/* Enhanced Hologram Energy Rings */}\n      {Array.from({ length: 5 }).map((_, i) => (\n        <mesh key={i} position={[0, 2 + i * 0.5, 0]} rotation={[0, i * Math.PI * 0.1, 0]}>\n          <torusGeometry args={[4.5 - i * 0.3, 0.06, 6, 24]} />\n          <meshBasicMaterial\n            color={i % 2 === 0 ? \"#f093fb\" : \"#4fd1c7\"}\n            transparent\n            opacity={0.4 - i * 0.05}\n          />\n        </mesh>\n      ))}\n\n      {/* Data stream effects */}\n      {Array.from({ length: 12 }).map((_, i) => {\n        const streamAngle = (i / 12) * Math.PI * 2;\n        const streamRadius = 5;\n        return (\n          <mesh\n            key={i}\n            position={[\n              Math.cos(streamAngle) * streamRadius,\n              Math.sin(streamAngle * 0.3) * 3,\n              Math.sin(streamAngle) * streamRadius\n            ]}\n          >\n            <cylinderGeometry args={[0.02, 0.02, 0.5, 8]} />\n            <meshBasicMaterial\n              color=\"#ffffff\"\n              transparent\n              opacity={0.3}\n            />\n          </mesh>\n        );\n      })}\n    </group>\n  );\n}\n\n// Preload the model\nuseGLTF.preload('/models/hologram_projector.glb');\n","size_bytes":6126},"client/src/components/3d/SpaceStation.tsx":{"content":"import { useFrame } from \"@react-three/fiber\";\nimport { useRef, useState, Suspense } from \"react\";\nimport { Text } from \"@react-three/drei\";\nimport * as THREE from \"three\";\nimport SafeModel, { ModelFallback } from \"./SafeModel\";\n\ninterface SpaceStationProps {\n  position: [number, number, number];\n}\n\nexport default function SpaceStation({ position }: SpaceStationProps) {\n  const mainRef = useRef<THREE.Group>(null);\n  const [hovered, setHovered] = useState(false);\n\n  useFrame((state) => {\n    if (mainRef.current) {\n      // Main station rotation\n      mainRef.current.rotation.y += 0.005;\n      mainRef.current.rotation.x = Math.sin(state.clock.elapsedTime * 0.5) * 0.1;\n      \n      // Scale effect when hovered\n      const targetScale = hovered ? 1.1 : 1;\n      mainRef.current.scale.lerp(new THREE.Vector3(targetScale, targetScale, targetScale), 0.1);\n    }\n  });\n\n  return (\n    <group position={position}>\n      {/* 3D Space Station Model */}\n      <group \n        ref={mainRef}\n        onPointerOver={() => setHovered(true)}\n        onPointerOut={() => setHovered(false)}\n      >\n        <SafeModel \n          url=\"/models/space_station.glb\"\n          scale={[2.5, 2.5, 2.5]}\n          fallback={<ModelFallback color=\"#4fd1c7\" scale={[2.5, 2.5, 2.5]} />}\n        >\n          {() => null}\n        </SafeModel>\n      </group>\n\n      {/* Holographic title */}\n      <Suspense fallback={null}>\n        <Text\n          position={[0, 4, 0]}\n          fontSize={0.8}\n          color=\"#4fd1c7\"\n          anchorX=\"center\"\n          anchorY=\"middle\"\n          font=\"/fonts/inter.json\"\n        >\n          WLSFX\n        </Text>\n\n        <Text\n          position={[0, 3.2, 0]}\n          fontSize={0.3}\n          color=\"#9f7aea\"\n          anchorX=\"center\"\n          anchorY=\"middle\"\n          font=\"/fonts/inter.json\"\n        >\n          Web3 & Game Developer Portfolio\n        </Text>\n      </Suspense>\n\n      {/* Floating particles around station */}\n      {Array.from({ length: 8 }).map((_, i) => {\n        const angle = (i / 8) * Math.PI * 2;\n        const radius = 5;\n        return (\n          <mesh \n            key={i} \n            position={[\n              Math.cos(angle) * radius, \n              Math.sin(angle * 0.5) * 2, \n              Math.sin(angle) * radius\n            ]}\n          >\n            <sphereGeometry args={[0.05, 8, 8]} />\n            <meshBasicMaterial \n              color=\"#4fd1c7\" \n              transparent \n              opacity={0.6}\n            />\n          </mesh>\n        );\n      })}\n    </group>\n  );\n}\n\n// Model is loaded safely by SafeModel component\n","size_bytes":2591},"client/src/components/3d/StarField.tsx":{"content":"import { useFrame } from \"@react-three/fiber\";\nimport { useRef, useMemo } from \"react\";\nimport * as THREE from \"three\";\n\nexport default function StarField() {\n  const starsRef = useRef<THREE.Points>(null);\n\n  // Pre-calculate star positions\n  const { positions, colors } = useMemo(() => {\n    const starCount = 1000;\n    const positions = new Float32Array(starCount * 3);\n    const colors = new Float32Array(starCount * 3);\n\n    for (let i = 0; i < starCount; i++) {\n      const i3 = i * 3;\n      \n      // Random positions in a sphere\n      const radius = Math.random() * 100 + 50;\n      const theta = Math.random() * Math.PI * 2;\n      const phi = Math.acos(Math.random() * 2 - 1);\n      \n      positions[i3] = radius * Math.sin(phi) * Math.cos(theta);\n      positions[i3 + 1] = radius * Math.sin(phi) * Math.sin(theta);\n      positions[i3 + 2] = radius * Math.cos(phi);\n\n      // Random star colors (blue to purple to white)\n      const colorChoice = Math.random();\n      if (colorChoice < 0.3) {\n        // Blue stars\n        colors[i3] = 0.3 + Math.random() * 0.4;\n        colors[i3 + 1] = 0.7 + Math.random() * 0.3;\n        colors[i3 + 2] = 1;\n      } else if (colorChoice < 0.6) {\n        // Purple stars\n        colors[i3] = 0.6 + Math.random() * 0.4;\n        colors[i3 + 1] = 0.4 + Math.random() * 0.3;\n        colors[i3 + 2] = 0.8 + Math.random() * 0.2;\n      } else {\n        // White stars\n        const brightness = 0.8 + Math.random() * 0.2;\n        colors[i3] = brightness;\n        colors[i3 + 1] = brightness;\n        colors[i3 + 2] = brightness;\n      }\n    }\n\n    return { positions, colors };\n  }, []);\n\n  useFrame(() => {\n    if (starsRef.current) {\n      starsRef.current.rotation.y += 0.0002;\n      starsRef.current.rotation.x += 0.0001;\n    }\n  });\n\n  return (\n    <points ref={starsRef}>\n      <bufferGeometry>\n        <bufferAttribute\n          attach=\"attributes-position\"\n          count={positions.length / 3}\n          array={positions}\n          itemSize={3}\n        />\n        <bufferAttribute\n          attach=\"attributes-color\"\n          count={colors.length / 3}\n          array={colors}\n          itemSize={3}\n        />\n      </bufferGeometry>\n      <pointsMaterial\n        size={0.5}\n        vertexColors\n        transparent\n        opacity={0.8}\n        sizeAttenuation={true}\n      />\n    </points>\n  );\n}\n","size_bytes":2345},"client/src/components/ui/HolographicText.tsx":{"content":"import { Text } from \"@react-three/drei\";\nimport { useFrame } from \"@react-three/fiber\";\nimport { useRef } from \"react\";\nimport * as THREE from \"three\";\n\ninterface HolographicTextProps {\n  children: string;\n  position?: [number, number, number];\n  fontSize?: number;\n  color?: string;\n  maxWidth?: number;\n}\n\nexport default function HolographicText({\n  children,\n  position = [0, 0, 0],\n  fontSize = 0.5,\n  color = \"#4fd1c7\",\n  maxWidth\n}: HolographicTextProps) {\n  const textRef = useRef<THREE.Mesh>(null);\n\n  useFrame((state) => {\n    if (textRef.current && textRef.current.material) {\n      // Holographic flicker effect\n      const flickerIntensity = 0.8 + Math.sin(state.clock.elapsedTime * 10) * 0.2;\n      const material = Array.isArray(textRef.current.material) \n        ? textRef.current.material[0] \n        : textRef.current.material;\n      if ('opacity' in material) {\n        material.opacity = flickerIntensity;\n      }\n    }\n  });\n\n  return (\n    <Text\n      ref={textRef}\n      position={position}\n      fontSize={fontSize}\n      color={color}\n      anchorX=\"center\"\n      anchorY=\"middle\"\n      font=\"/fonts/inter.json\"\n      maxWidth={maxWidth}\n    >\n      {children}\n    </Text>\n  );\n}\n","size_bytes":1205},"client/src/components/ui/UIOverlay.tsx":{"content":"import { usePortfolio } from \"../../lib/stores/usePortfolio\";\nimport { useAudio } from \"../../lib/stores/useAudio\";\n\nexport default function UIOverlay() {\n  const { currentSection, setCurrentSection } = usePortfolio();\n  const { toggleMute, isMuted, ambientVolume, setAmbientVolume } = useAudio();\n\n  return (\n    <div className=\"fixed inset-0 pointer-events-none z-10\">\n      {/* Navigation instructions */}\n      <div className=\"absolute bottom-4 left-4 text-cyan-400 font-mono text-sm pointer-events-auto\">\n        <div className=\"bg-gray-900/80 backdrop-blur-sm rounded-lg p-3 border border-cyan-400/30\">\n          <p className=\"mb-1\">🚀 Use mouse to explore WLSFX</p>\n          <p className=\"mb-1\">🎯 Click portals to navigate sections</p>\n          <p className=\"text-xs text-cyan-300\">Current: {currentSection || 'home'}</p>\n        </div>\n      </div>\n\n      {/* Audio Controls */}\n      <div className=\"absolute bottom-4 right-4 text-cyan-400 font-mono text-sm pointer-events-auto\">\n        <div className=\"bg-gray-900/80 backdrop-blur-sm rounded-lg p-3 border border-cyan-400/30\">\n          <div className=\"flex items-center space-x-3\">\n            <button\n              onClick={toggleMute}\n              className=\"px-3 py-1 rounded bg-cyan-500/20 hover:bg-cyan-500/30 transition-all\"\n              title={isMuted ? \"Unmute audio\" : \"Mute audio\"}\n            >\n              {isMuted ? \"🔇 Audio Off\" : \"🔊 Audio On\"}\n            </button>\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"text-xs\">Volume:</span>\n              <input\n                type=\"range\"\n                min=\"0\"\n                max=\"1\"\n                step=\"0.1\"\n                value={ambientVolume}\n                onChange={(e) => setAmbientVolume(parseFloat(e.target.value))}\n                className=\"w-16 accent-cyan-400\"\n                disabled={isMuted}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Section indicator */}\n      <div className=\"absolute top-4 right-4 text-purple-400 font-mono text-lg pointer-events-auto\">\n        <div className=\"bg-gray-900/80 backdrop-blur-sm rounded-lg p-3 border border-purple-400/30\">\n          <div className=\"flex space-x-2\">\n            {['home', 'about', 'projects', 'skills', 'contact'].map((section) => (\n              <button\n                key={section}\n                onClick={() => setCurrentSection(section)}\n                className={`px-2 py-1 rounded text-xs transition-all ${\n                  currentSection === section\n                    ? 'bg-purple-500 text-white'\n                    : 'bg-gray-700 text-gray-300 hover:bg-gray-600'\n                }`}\n              >\n                {section.toUpperCase()}\n              </button>\n            ))}\n          </div>\n        </div>\n      </div>\n\n    </div>\n  );\n}\n","size_bytes":2866},"client/src/components/ui/WebGLFallback.tsx":{"content":"import { useState } from \"react\";\nimport { portfolioData } from \"../../lib/constants/portfolioData\";\n\ninterface WebGLFallbackProps {\n  error?: string;\n}\n\nexport default function WebGLFallback({ error }: WebGLFallbackProps) {\n  const [activeSection, setActiveSection] = useState<string>('about');\n\n  const sections = [\n    { id: 'about', name: 'About', color: 'text-cyan-400' },\n    { id: 'projects', name: 'Projects', color: 'text-purple-400' },\n    { id: 'skills', name: 'Skills', color: 'text-pink-400' },\n    { id: 'contact', name: 'Contact', color: 'text-blue-400' }\n  ];\n\n  const handleContactClick = (contact: any) => {\n    if (contact.type === 'email') {\n      window.location.href = `mailto:${contact.value}`;\n    } else {\n      window.open(contact.value, '_blank');\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-black text-white font-mono\">\n      {/* Background Pattern */}\n      <div className=\"fixed inset-0 opacity-10\">\n        <div className=\"absolute inset-0\" style={{\n          backgroundImage: `radial-gradient(circle at 25% 25%, #4fd1c7 0%, transparent 50%),\n                           radial-gradient(circle at 75% 75%, #9f7aea 0%, transparent 50%),\n                           radial-gradient(circle at 50% 50%, #f093fb 0%, transparent 50%)`,\n          backgroundSize: '300px 300px'\n        }} />\n      </div>\n\n      <div className=\"relative z-10\">\n        {/* Header */}\n        <div className=\"text-center pt-12 pb-8\">\n          <h1 className=\"text-4xl md:text-6xl font-bold bg-gradient-to-r from-cyan-400 to-purple-400 bg-clip-text text-transparent mb-4\">\n            WLSFX\n          </h1>\n          <p className=\"text-xl text-purple-300 mb-4\">\n            Web3 & Game Developer Portfolio\n          </p>\n          \n          {/* WebGL Error Notice */}\n          <div className=\"max-w-2xl mx-auto bg-gray-900 border border-red-400/30 rounded-lg p-4 mb-8\">\n            <div className=\"text-red-400 text-sm mb-2\">⚠️ 3D Mode Unavailable</div>\n            <div className=\"text-gray-300 text-xs\">\n              {error || 'WebGL is not supported in your browser. Showing fallback 2D interface.'}\n            </div>\n          </div>\n        </div>\n\n        {/* Navigation */}\n        <div className=\"flex justify-center mb-8\">\n          <div className=\"flex space-x-1 bg-gray-900/80 backdrop-blur-sm rounded-lg p-2 border border-cyan-400/30\">\n            {sections.map((section) => (\n              <button\n                key={section.id}\n                onClick={() => setActiveSection(section.id)}\n                className={`px-4 py-2 rounded text-sm transition-all ${\n                  activeSection === section.id\n                    ? `bg-gradient-to-r from-cyan-500 to-purple-500 text-white`\n                    : `${section.color} hover:bg-gray-700`\n                }`}\n              >\n                {section.name}\n              </button>\n            ))}\n          </div>\n        </div>\n\n        {/* Content */}\n        <div className=\"max-w-4xl mx-auto px-4 pb-12\">\n          {/* About Section */}\n          {activeSection === 'about' && (\n            <div className=\"bg-gray-900/50 backdrop-blur-sm rounded-lg p-6 border border-cyan-400/30\">\n              <h2 className=\"text-2xl text-cyan-400 mb-4\">About Me</h2>\n              <div className=\"space-y-4\">\n                <p className=\"text-gray-300 leading-relaxed\">\n                  {portfolioData.about.description}\n                </p>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mt-6\">\n                  <div className=\"bg-gray-800/50 rounded-lg p-4\">\n                    <div className=\"text-purple-400 text-sm\">Experience</div>\n                    <div className=\"text-white text-lg\">{portfolioData.about.experience}</div>\n                  </div>\n                  <div className=\"bg-gray-800/50 rounded-lg p-4\">\n                    <div className=\"text-purple-400 text-sm\">Location</div>\n                    <div className=\"text-white text-lg\">{portfolioData.about.location}</div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Projects Section */}\n          {activeSection === 'projects' && (\n            <div className=\"bg-gray-900/50 backdrop-blur-sm rounded-lg p-6 border border-purple-400/30\">\n              <h2 className=\"text-2xl text-purple-400 mb-6\">Projects</h2>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                {portfolioData.projects.map((project) => (\n                  <div key={project.id} className=\"bg-gray-800/50 rounded-lg p-4 border border-gray-700\">\n                    <h3 className=\"text-lg font-semibold text-white mb-2\">{project.title}</h3>\n                    <p className=\"text-gray-300 text-sm mb-3 leading-relaxed\">\n                      {project.description}\n                    </p>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {project.tech.map((tech, i) => (\n                        <span\n                          key={i}\n                          className=\"px-2 py-1 bg-purple-500/20 text-purple-300 text-xs rounded\"\n                        >\n                          {tech}\n                        </span>\n                      ))}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Skills Section */}\n          {activeSection === 'skills' && (\n            <div className=\"bg-gray-900/50 backdrop-blur-sm rounded-lg p-6 border border-pink-400/30\">\n              <h2 className=\"text-2xl text-pink-400 mb-6\">Skills</h2>\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4\">\n                {portfolioData.skills.map((skill, i) => (\n                  <div key={i} className=\"bg-gray-800/50 rounded-lg p-4 text-center\">\n                    <div className=\"text-white font-semibold\">{skill.name}</div>\n                    <div className=\"text-sm text-gray-400\">{skill.level}</div>\n                    <div className=\"mt-2 h-2 bg-gray-700 rounded-full\">\n                      <div\n                        className=\"h-2 rounded-full bg-gradient-to-r from-pink-400 to-purple-500\"\n                        style={{\n                          width: skill.level === 'Expert' ? '100%' :\n                                 skill.level === 'Advanced' ? '80%' : '60%'\n                        }}\n                      />\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Contact Section */}\n          {activeSection === 'contact' && (\n            <div className=\"bg-gray-900/50 backdrop-blur-sm rounded-lg p-6 border border-blue-400/30\">\n              <h2 className=\"text-2xl text-blue-400 mb-6\">Contact</h2>\n              <div className=\"text-center mb-6\">\n                <p className=\"text-gray-300 mb-4\">\n                  Ready to collaborate? Choose your preferred communication channel:\n                </p>\n              </div>\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4\">\n                {portfolioData.contact.map((contact, i) => (\n                  <button\n                    key={i}\n                    onClick={() => handleContactClick(contact)}\n                    className=\"bg-gray-800/50 hover:bg-gray-700/50 rounded-lg p-4 border border-gray-600 hover:border-blue-400/50 transition-all duration-300 group\"\n                  >\n                    <div className=\"text-white font-semibold group-hover:text-blue-400 transition-colors\">\n                      {contact.label}\n                    </div>\n                    <div className=\"text-sm text-gray-400 mt-1\">\n                      {contact.type === 'email' ? 'Send message' : 'Visit profile'}\n                    </div>\n                  </button>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Footer */}\n        <div className=\"text-center text-gray-400 text-sm pb-8\">\n          <p>© 2024 DevMaster. Built with React & Three.js (when WebGL is available)</p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":8173},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 text-sm font-medium transition-all hover:underline text-left [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 text-muted-foreground transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":2001},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4419},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground [&>svg~*]:pl-7\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1598},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1140},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1902},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-8 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: cn(\n          \"relative p-0 text-center text-sm focus-within:relative focus-within:z-20 [&:has([aria-selected])]:bg-accent [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected].day-range-end)]:rounded-r-md\",\n          props.mode === \"range\"\n            ? \"[&:has(>.day-range-end)]:rounded-r-md [&:has(>.day-range-start)]:rounded-l-md first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md\"\n            : \"[&:has([aria-selected])]:rounded-md\"\n        ),\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-8 w-8 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_start: \"day-range-start\",\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2935},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-xl border bg-card text-card-foreground shadow\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"font-semibold leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1828},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary shadow focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1012},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4873},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-4 w-4 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7224},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogTrigger,\n  DialogClose,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3849},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md\",\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&>svg]:size-4 [&>svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7480},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-[0.8rem] text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-[0.8rem] font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4132},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1198},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Minus } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-9 w-9 items-center justify-center border-y border-r border-input text-sm shadow-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-1 ring-ring\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Minus />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2143},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":768},"client/src/components/ui/interface.tsx":{"content":"import { useEffect } from \"react\";\nimport { useGame } from \"@/lib/stores/useGame\";\nimport { useAudio } from \"@/lib/stores/useAudio\";\nimport { Button } from \"./button\";\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from \"./card\";\nimport { VolumeX, Volume2, RotateCw, Trophy } from \"lucide-react\";\n\nexport function Interface() {\n  const restart = useGame((state) => state.restart);\n  const phase = useGame((state) => state.phase);\n  const { isMuted, toggleMute } = useAudio();\n\n  // Handle clicks on the interface in the ready phase to start the game\n  useEffect(() => {\n    if (phase === \"ready\") {\n      const handleClick = () => {\n        const activeElement = document.activeElement;\n        if (activeElement && 'blur' in activeElement) {\n          (activeElement as HTMLElement).blur();\n        }\n        const event = new KeyboardEvent(\"keydown\", { code: \"Space\" });\n        window.dispatchEvent(event);\n      };\n\n      window.addEventListener(\"click\", handleClick);\n      return () => window.removeEventListener(\"click\", handleClick);\n    }\n  }, [phase]);\n\n  return (\n    <>\n      {/* Top-right corner UI controls */}\n      <div className=\"fixed top-4 right-4 flex gap-2 z-10\">\n        <Button\n          variant=\"outline\"\n          size=\"icon\"\n          onClick={toggleMute}\n          title={isMuted ? \"Unmute\" : \"Mute\"}\n        >\n          {isMuted ? <VolumeX size={18} /> : <Volume2 size={18} />}\n        </Button>\n        \n        <Button\n          variant=\"outline\"\n          size=\"icon\"\n          onClick={restart}\n          title=\"Restart Game\"\n        >\n          <RotateCw size={18} />\n        </Button>\n      </div>\n      \n      {/* Game completion overlay */}\n      {phase === \"ended\" && (\n        <div className=\"fixed inset-0 flex items-center justify-center z-20 bg-black/30\">\n          <Card className=\"w-full max-w-md mx-4 shadow-lg\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-center gap-2\">\n                <Trophy className=\"text-yellow-500\" />\n                Level Complete!\n              </CardTitle>\n            </CardHeader>\n            \n            <CardContent>\n              <p className=\"text-center text-muted-foreground\">\n                Congratulations! You successfully navigated the course.\n              </p>\n            </CardContent>\n            \n            <CardFooter className=\"flex justify-center\">\n              <Button onClick={restart} className=\"w-full\">\n                Play Again\n              </Button>\n            </CardFooter>\n          </Card>\n        </div>\n      )}\n      \n      {/* Instructions panel */}\n      <div className=\"fixed bottom-4 left-4 z-10\">\n        <Card className=\"w-auto max-w-xs bg-background/80 backdrop-blur-sm\">\n          <CardContent className=\"p-4\">\n            <h3 className=\"font-medium mb-2\">Controls:</h3>\n            <ul className=\"text-sm space-y-1 text-muted-foreground\">\n              <li>WASD or Arrow Keys: Move the ball</li>\n              <li>Space: Jump</li>\n              <li>R: Restart game</li>\n              <li>M: Toggle sound</li>\n            </ul>\n          </CardContent>\n        </Card>\n      </div>\n    </>\n  );\n}\n","size_bytes":3180},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-9 items-center space-x-1 rounded-md border bg-background p-1 shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-4 w-4 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8522},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-300 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5124},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationLink,\n  PaginationItem,\n  PaginationPrevious,\n  PaginationNext,\n  PaginationEllipsis,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverAnchor = PopoverPrimitive.Anchor\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }\n","size_bytes":1292},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-2 w-full overflow-hidden rounded-full bg-primary/20\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":792},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary shadow focus:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-3.5 w-3.5 fill-primary\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1410},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"px-2 py-1.5 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute right-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5639},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500 data-[state=open]:animate-in data-[state=closed]:animate-out\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n      {children}\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4280},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { VariantProps, cva } from \"class-variance-authority\";\nimport { PanelLeft } from \"lucide-react\";\n\nimport { useIsMobile } from \"@/hooks/use-is-mobile\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Separator } from \"@/components/ui/separator\";\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\";\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7;\nconst SIDEBAR_WIDTH = \"16rem\";\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\";\nconst SIDEBAR_WIDTH_ICON = \"3rem\";\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\";\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\";\n  open: boolean;\n  setOpen: (open: boolean) => void;\n  openMobile: boolean;\n  setOpenMobile: (open: boolean) => void;\n  isMobile: boolean;\n  toggleSidebar: () => void;\n};\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null);\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext);\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\");\n  }\n\n  return context;\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean;\n    open?: boolean;\n    onOpenChange?: (open: boolean) => void;\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    const isMobile = useIsMobile();\n    const [openMobile, setOpenMobile] = React.useState(false);\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen);\n    const open = openProp ?? _open;\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value;\n        if (setOpenProp) {\n          setOpenProp(openState);\n        } else {\n          _setOpen(openState);\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`;\n      },\n      [setOpenProp, open],\n    );\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open);\n    }, [isMobile, setOpen, setOpenMobile]);\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault();\n          toggleSidebar();\n        }\n      };\n\n      window.addEventListener(\"keydown\", handleKeyDown);\n      return () => window.removeEventListener(\"keydown\", handleKeyDown);\n    }, [toggleSidebar]);\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\";\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      ],\n    );\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className,\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    );\n  },\n);\nSidebarProvider.displayName = \"SidebarProvider\";\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\";\n    variant?: \"sidebar\" | \"floating\" | \"inset\";\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\";\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar();\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className,\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      );\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      );\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\",\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className,\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    );\n  },\n);\nSidebar.displayName = \"Sidebar\";\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar();\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event);\n        toggleSidebar();\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  );\n});\nSidebarTrigger.displayName = \"SidebarTrigger\";\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar();\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarRail.displayName = \"SidebarRail\";\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarInset.displayName = \"SidebarInset\";\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarInput.displayName = \"SidebarInput\";\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  );\n});\nSidebarHeader.displayName = \"SidebarHeader\";\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  );\n});\nSidebarFooter.displayName = \"SidebarFooter\";\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  );\n});\nSidebarSeparator.displayName = \"SidebarSeparator\";\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarContent.displayName = \"SidebarContent\";\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  );\n});\nSidebarGroup.displayName = \"SidebarGroup\";\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\";\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarGroupAction.displayName = \"SidebarGroupAction\";\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n));\nSidebarGroupContent.displayName = \"SidebarGroupContent\";\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n));\nSidebarMenu.displayName = \"SidebarMenu\";\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n));\nSidebarMenuItem.displayName = \"SidebarMenuItem\";\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean;\n    isActive?: boolean;\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>;\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref,\n  ) => {\n    const Comp = asChild ? Slot : \"button\";\n    const { isMobile, state } = useSidebar();\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    );\n\n    if (!tooltip) {\n      return button;\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      };\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    );\n  },\n);\nSidebarMenuButton.displayName = \"SidebarMenuButton\";\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean;\n    showOnHover?: boolean;\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarMenuAction.displayName = \"SidebarMenuAction\";\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className,\n    )}\n    {...props}\n  />\n));\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\";\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean;\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`;\n  }, []);\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  );\n});\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\";\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className,\n    )}\n    {...props}\n  />\n));\nSidebarMenuSub.displayName = \"SidebarMenuSub\";\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />);\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\";\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean;\n    size?: \"sm\" | \"md\";\n    isActive?: boolean;\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\";\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n};\n","size_bytes":23790},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-primary/10\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":266},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-1.5 w-full grow overflow-hidden rounded-full bg-primary/20\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-4 w-4 rounded-full border border-primary/50 bg-background shadow transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1037},"client/src/components/ui/sonner.tsx":{"content":"\"use client\"\n\nimport { useTheme } from \"next-themes\"\nimport { Toaster as Sonner } from \"sonner\"\n\ntype ToasterProps = React.ComponentProps<typeof Sonner>\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = \"system\" } = useTheme()\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps[\"theme\"]}\n      className=\"toaster group\"\n      toastOptions={{\n        classNames: {\n          toast:\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg\",\n          description: \"group-[.toast]:text-muted-foreground\",\n          actionButton:\n            \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground\",\n          cancelButton:\n            \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground\",\n        },\n      }}\n      {...props}\n    />\n  )\n}\n\nexport { Toaster }\n","size_bytes":894},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-5 w-9 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-4 w-4 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1148},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\n      \"p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n      className\n    )}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2859},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1877},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-base shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":649},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent shadow-sm hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-9 px-2 min-w-9\",\n        sm: \"h-8 px-1.5 min-w-8\",\n        lg: \"h-10 px-2.5 min-w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1486},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Portal>\n    <TooltipPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 overflow-hidden rounded-md bg-primary px-3 py-1.5 text-xs text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </TooltipPrimitive.Portal>\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1217},"client/src/lib/constants/portfolioData.ts":{"content":"export const portfolioData = {\n  about: {\n    name: \"DevMaster\",\n    title: \"Web3 & Game Developer\",\n    description: \"Passionate full-stack developer specializing in Web3 technologies, game development, and immersive 3D experiences. I create innovative solutions that bridge the gap between traditional web development and cutting-edge blockchain technology.\",\n    experience: \"5+ years\",\n    location: \"Metaverse, Earth\"\n  },\n  \n  projects: [\n    {\n      id: 1,\n      title: \"DeFi Trading Bot\",\n      description: \"Advanced automated trading system built with smart contracts and real-time market analysis.\",\n      tech: [\"Solidity\", \"Node.js\", \"Web3.js\", \"React\"],\n      color: \"#4fd1c7\",\n      type: \"blockchain\"\n    },\n    {\n      id: 2,\n      title: \"3D RPG Game\",\n      description: \"Immersive role-playing game with blockchain-based assets and NFT integration.\",\n      tech: [\"Unity\", \"C#\", \"Solidity\", \"IPFS\"],\n      color: \"#9f7aea\",\n      type: \"game\"\n    },\n    {\n      id: 3,\n      title: \"Metaverse Platform\",\n      description: \"Virtual world platform with user-generated content and cryptocurrency rewards.\",\n      tech: [\"Three.js\", \"WebRTC\", \"Ethereum\", \"React\"],\n      color: \"#f093fb\",\n      type: \"web3\"\n    },\n    {\n      id: 4,\n      title: \"NFT Marketplace\",\n      description: \"Decentralized marketplace for trading digital assets with advanced filtering.\",\n      tech: [\"Next.js\", \"Solidity\", \"IPFS\", \"Polygon\"],\n      color: \"#4ecdc4\",\n      type: \"blockchain\"\n    }\n  ],\n  \n  skills: [\n    { name: \"React\", level: \"Expert\", color: \"#61dafb\" },\n    { name: \"Three.js\", level: \"Advanced\", color: \"#000000\" },\n    { name: \"Solidity\", level: \"Advanced\", color: \"#363636\" },\n    { name: \"Node.js\", level: \"Expert\", color: \"#68a063\" },\n    { name: \"Unity\", level: \"Advanced\", color: \"#000000\" },\n    { name: \"TypeScript\", level: \"Expert\", color: \"#3178c6\" },\n    { name: \"Web3.js\", level: \"Advanced\", color: \"#f16822\" },\n    { name: \"Python\", level: \"Advanced\", color: \"#3776ab\" },\n    { name: \"Smart Contracts\", level: \"Advanced\", color: \"#627eea\" },\n    { name: \"Game Development\", level: \"Advanced\", color: \"#ff6b35\" },\n    { name: \"Blockchain\", level: \"Expert\", color: \"#f2a900\" },\n    { name: \"3D Graphics\", level: \"Advanced\", color: \"#ff0080\" }\n  ],\n  \n  contact: [\n    {\n      label: \"Email\",\n      value: \"hello@devmaster.dev\",\n      type: \"email\",\n      color: \"#4fd1c7\"\n    },\n    {\n      label: \"GitHub\",\n      value: \"https://github.com/devmaster\",\n      type: \"link\",\n      color: \"#9f7aea\"\n    },\n    {\n      label: \"Twitter\",\n      value: \"https://twitter.com/devmaster\",\n      type: \"link\",\n      color: \"#1da1f2\"\n    },\n    {\n      label: \"LinkedIn\",\n      value: \"https://linkedin.com/in/devmaster\",\n      type: \"link\",\n      color: \"#0077b5\"\n    },\n    {\n      label: \"Discord\",\n      value: \"https://discord.gg/devmaster\",\n      type: \"link\",\n      color: \"#7289da\"\n    }\n  ]\n};\n","size_bytes":2921},"client/src/lib/stores/useAudio.tsx":{"content":"import { create } from \"zustand\";\n\ninterface AudioState {\n  backgroundMusic: HTMLAudioElement | null;\n  hitSound: HTMLAudioElement | null;\n  successSound: HTMLAudioElement | null;\n  ambientVolume: number;\n  effectsVolume: number;\n  isMuted: boolean;\n  isInitialized: boolean;\n  \n  // Setter functions\n  setBackgroundMusic: (music: HTMLAudioElement) => void;\n  setHitSound: (sound: HTMLAudioElement) => void;\n  setSuccessSound: (sound: HTMLAudioElement) => void;\n  \n  // Control functions\n  initializeAudio: () => void;\n  toggleMute: () => void;\n  setAmbientVolume: (volume: number) => void;\n  setEffectsVolume: (volume: number) => void;\n  playHit: () => void;\n  playSuccess: () => void;\n  playNavigationSound: () => void;\n  playBackgroundAmbient: () => void;\n  stopBackgroundAmbient: () => void;\n}\n\nexport const useAudio = create<AudioState>((set, get) => ({\n  backgroundMusic: null,\n  hitSound: null,\n  successSound: null,\n  ambientVolume: 0.3,\n  effectsVolume: 0.5,\n  isMuted: true, // Start muted by default for user interaction compliance\n  isInitialized: false,\n  \n  setBackgroundMusic: (music) => set({ backgroundMusic: music }),\n  setHitSound: (sound) => set({ hitSound: sound }),\n  setSuccessSound: (sound) => set({ successSound: sound }),\n  \n  initializeAudio: () => {\n    if (get().isInitialized) return;\n    \n    try {\n      // Create audio elements\n      const backgroundMusic = new Audio('/sounds/background.mp3');\n      const hitSound = new Audio('/sounds/hit.mp3');\n      const successSound = new Audio('/sounds/success.mp3');\n      \n      // Configure background music\n      backgroundMusic.loop = true;\n      backgroundMusic.volume = get().ambientVolume;\n      \n      // Configure sound effects\n      hitSound.volume = get().effectsVolume;\n      successSound.volume = get().effectsVolume;\n      \n      set({\n        backgroundMusic,\n        hitSound,\n        successSound,\n        isInitialized: true\n      });\n      \n      console.log('Audio system initialized');\n    } catch (error) {\n      console.error('Audio initialization failed:', error);\n    }\n  },\n  \n  toggleMute: () => {\n    const { isMuted, backgroundMusic } = get();\n    const newMutedState = !isMuted;\n    \n    set({ isMuted: newMutedState });\n    \n    // Handle background music\n    if (backgroundMusic) {\n      if (newMutedState) {\n        backgroundMusic.pause();\n      } else {\n        backgroundMusic.play().catch(() => {\n          console.log('Background music autoplay prevented');\n        });\n      }\n    }\n    \n    console.log(`Sound ${newMutedState ? 'muted' : 'unmuted'}`);\n  },\n  \n  setAmbientVolume: (volume) => {\n    set({ ambientVolume: volume });\n    const { backgroundMusic } = get();\n    if (backgroundMusic) {\n      backgroundMusic.volume = volume;\n    }\n  },\n  \n  setEffectsVolume: (volume) => {\n    set({ effectsVolume: volume });\n    const { hitSound, successSound } = get();\n    if (hitSound) hitSound.volume = volume;\n    if (successSound) successSound.volume = volume;\n  },\n  \n  playHit: () => {\n    const { hitSound, isMuted } = get();\n    if (hitSound && !isMuted) {\n      const soundClone = hitSound.cloneNode() as HTMLAudioElement;\n      soundClone.volume = get().effectsVolume;\n      soundClone.play().catch(error => {\n        console.log(\"Hit sound play prevented:\", error);\n      });\n    }\n  },\n  \n  playSuccess: () => {\n    const { successSound, isMuted } = get();\n    if (successSound && !isMuted) {\n      successSound.currentTime = 0;\n      successSound.play().catch(error => {\n        console.log(\"Success sound play prevented:\", error);\n      });\n    }\n  },\n  \n  playNavigationSound: () => {\n    // Use hit sound for navigation feedback\n    get().playHit();\n  },\n  \n  playBackgroundAmbient: () => {\n    const { backgroundMusic, isMuted } = get();\n    if (backgroundMusic && !isMuted) {\n      backgroundMusic.currentTime = 0;\n      backgroundMusic.play().catch(() => {\n        console.log('Background music autoplay prevented');\n      });\n    }\n  },\n  \n  stopBackgroundAmbient: () => {\n    const { backgroundMusic } = get();\n    if (backgroundMusic) {\n      backgroundMusic.pause();\n      backgroundMusic.currentTime = 0;\n    }\n  }\n}));\n","size_bytes":4155},"client/src/lib/stores/useGame.tsx":{"content":"import { create } from \"zustand\";\nimport { subscribeWithSelector } from \"zustand/middleware\";\n\nexport type GamePhase = \"ready\" | \"playing\" | \"ended\";\n\ninterface GameState {\n  phase: GamePhase;\n  \n  // Actions\n  start: () => void;\n  restart: () => void;\n  end: () => void;\n}\n\nexport const useGame = create<GameState>()(\n  subscribeWithSelector((set) => ({\n    phase: \"ready\",\n    \n    start: () => {\n      set((state) => {\n        // Only transition from ready to playing\n        if (state.phase === \"ready\") {\n          return { phase: \"playing\" };\n        }\n        return {};\n      });\n    },\n    \n    restart: () => {\n      set(() => ({ phase: \"ready\" }));\n    },\n    \n    end: () => {\n      set((state) => {\n        // Only transition from playing to ended\n        if (state.phase === \"playing\") {\n          return { phase: \"ended\" };\n        }\n        return {};\n      });\n    }\n  }))\n);\n","size_bytes":893},"client/src/lib/stores/usePortfolio.tsx":{"content":"import { create } from \"zustand\";\n\ninterface PortfolioState {\n  currentSection: string;\n  isLoading: boolean;\n  \n  // Actions\n  setCurrentSection: (section: string) => void;\n  setLoading: (loading: boolean) => void;\n}\n\nexport const usePortfolio = create<PortfolioState>((set) => ({\n  currentSection: 'home',\n  isLoading: true,\n  \n  setCurrentSection: (section) => set({ currentSection: section }),\n  setLoading: (loading) => set({ isLoading: loading }),\n}));\n","size_bytes":459},"client/src/lib/utils/performance.ts":{"content":"import { GLTF, GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\nimport * as THREE from 'three';\n\nclass PerformanceOptimizer {\n  private static instance: PerformanceOptimizer;\n  private meshCache: Map<string, THREE.Mesh> = new Map();\n  private textureCache: Map<string, THREE.Texture> = new Map();\n  private gltfCache: Map<string, GLTF> = new Map();\n  private disposed: Set<string> = new Set();\n\n  static getInstance(): PerformanceOptimizer {\n    if (!PerformanceOptimizer.instance) {\n      PerformanceOptimizer.instance = new PerformanceOptimizer();\n    }\n    return PerformanceOptimizer.instance;\n  }\n\n  // Cache and reuse geometries\n  cacheGeometry(key: string, geometry: THREE.BufferGeometry): THREE.BufferGeometry {\n    if (this.disposed.has(key)) {\n      return geometry.clone();\n    }\n    return geometry;\n  }\n\n  // Cache and reuse textures\n  cacheTexture(key: string, texture: THREE.Texture): THREE.Texture {\n    if (this.textureCache.has(key)) {\n      return this.textureCache.get(key)!;\n    }\n    this.textureCache.set(key, texture);\n    return texture;\n  }\n\n  // Optimize materials for performance\n  createOptimizedMaterial(options: {\n    color?: THREE.ColorRepresentation;\n    transparent?: boolean;\n    opacity?: number;\n    emissive?: THREE.ColorRepresentation;\n    wireframe?: boolean;\n  }): THREE.MeshBasicMaterial | THREE.MeshStandardMaterial {\n    const isSimple = !options.emissive && !options.wireframe;\n    \n    if (isSimple) {\n      return new THREE.MeshBasicMaterial({\n        color: options.color,\n        transparent: options.transparent,\n        opacity: options.opacity,\n      });\n    }\n\n    return new THREE.MeshStandardMaterial({\n      color: options.color,\n      transparent: options.transparent,\n      opacity: options.opacity,\n      emissive: options.emissive,\n      wireframe: options.wireframe,\n      metalness: 0.1,\n      roughness: 0.8,\n    });\n  }\n\n  // Frustum culling for better performance\n  enableFrustumCulling(object: THREE.Object3D): void {\n    object.traverse((child) => {\n      if (child instanceof THREE.Mesh) {\n        child.frustumCulled = true;\n      }\n    });\n  }\n\n  // Level of Detail system\n  createLOD(meshes: THREE.Mesh[], distances: number[]): THREE.LOD {\n    const lod = new THREE.LOD();\n    \n    meshes.forEach((mesh, index) => {\n      lod.addLevel(mesh, distances[index] || 0);\n    });\n\n    return lod;\n  }\n\n  // Dispose of unused resources\n  disposeObject(object: THREE.Object3D): void {\n    object.traverse((child) => {\n      if (child instanceof THREE.Mesh) {\n        if (child.geometry) child.geometry.dispose();\n        if (child.material) {\n          if (Array.isArray(child.material)) {\n            child.material.forEach(material => material.dispose());\n          } else {\n            child.material.dispose();\n          }\n        }\n      }\n    });\n  }\n\n  // Get performance stats\n  getPerformanceStats(): {\n    geometries: number;\n    textures: number;\n    programs: number;\n  } {\n    return {\n      geometries: (THREE as any).Cache?.files?.size || 0,\n      textures: this.textureCache.size,\n      programs: 0, // Would need renderer access\n    };\n  }\n\n  // Clear all caches\n  clearCaches(): void {\n    this.meshCache.clear();\n    this.textureCache.forEach(texture => texture.dispose());\n    this.textureCache.clear();\n    this.gltfCache.clear();\n  }\n}\n\nexport const performanceOptimizer = PerformanceOptimizer.getInstance();\n\n// Performance monitoring utilities\nexport class PerformanceMonitor {\n  private frameCount = 0;\n  private lastTime = performance.now();\n  private fps = 0;\n\n  update(): number {\n    this.frameCount++;\n    const currentTime = performance.now();\n    \n    if (currentTime - this.lastTime >= 1000) {\n      this.fps = Math.round((this.frameCount * 1000) / (currentTime - this.lastTime));\n      this.frameCount = 0;\n      this.lastTime = currentTime;\n    }\n\n    return this.fps;\n  }\n\n  getFPS(): number {\n    return this.fps;\n  }\n\n  getMemoryUsage(): any {\n    return (performance as any).memory;\n  }\n}\n\nexport const performanceMonitor = new PerformanceMonitor();\n\n// Utility functions\nexport const optimizeGeometry = (geometry: THREE.BufferGeometry): THREE.BufferGeometry => {\n  // Compute vertex normals for better lighting\n  if (!geometry.attributes.normal) {\n    geometry.computeVertexNormals();\n  }\n  \n  return geometry;\n};\n\nexport const createInstancedMesh = (\n  geometry: THREE.BufferGeometry,\n  material: THREE.Material,\n  count: number\n): THREE.InstancedMesh => {\n  const mesh = new THREE.InstancedMesh(geometry, material, count);\n  mesh.frustumCulled = true;\n  return mesh;\n};","size_bytes":4586},"client/src/lib/utils/webgl.ts":{"content":"/**\n * WebGL Detection and Error Handling Utilities\n */\n\nexport interface WebGLSupport {\n  isSupported: boolean;\n  error?: string;\n  version?: number;\n}\n\n/**\n * Detects WebGL support in the current browser environment\n */\nexport function detectWebGL(): WebGLSupport {\n  try {\n    const canvas = document.createElement('canvas');\n    \n    // Try WebGL 2 first\n    let gl = canvas.getContext('webgl2') || canvas.getContext('experimental-webgl2');\n    if (gl) {\n      return {\n        isSupported: true,\n        version: 2\n      };\n    }\n\n    // Fall back to WebGL 1\n    gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\n    if (gl) {\n      return {\n        isSupported: true,\n        version: 1\n      };\n    }\n\n    return {\n      isSupported: false,\n      error: 'WebGL not supported by browser'\n    };\n  } catch (error) {\n    return {\n      isSupported: false,\n      error: `WebGL detection failed: ${error instanceof Error ? error.message : 'Unknown error'}`\n    };\n  }\n}\n\n/**\n * Creates a WebGL context with proper error handling\n */\nexport function createWebGLContext(canvas: HTMLCanvasElement): WebGLRenderingContext | WebGL2RenderingContext | null {\n  const contextOptions = {\n    antialias: true,\n    alpha: true,\n    preserveDrawingBuffer: false,\n    powerPreference: 'default' as WebGLPowerPreference,\n    failIfMajorPerformanceCaveat: false,\n    desynchronized: false\n  };\n\n  try {\n    // Try WebGL 2 first\n    let context = canvas.getContext('webgl2', contextOptions) as WebGL2RenderingContext;\n    if (context) return context;\n\n    // Fall back to WebGL 1\n    const webgl1Context = canvas.getContext('webgl', contextOptions) as WebGLRenderingContext;\n    if (webgl1Context) return webgl1Context;\n\n    // Try experimental contexts\n    const expWebgl2Context = canvas.getContext('experimental-webgl2', contextOptions) as WebGL2RenderingContext;\n    if (expWebgl2Context) return expWebgl2Context;\n\n    const expWebgl1Context = canvas.getContext('experimental-webgl', contextOptions) as WebGLRenderingContext;\n    if (expWebgl1Context) return expWebgl1Context;\n\n    return null;\n  } catch (error) {\n    console.error('WebGL context creation failed:', error);\n    return null;\n  }\n}\n\n/**\n * Gets WebGL error information\n */\nexport function getWebGLError(gl: WebGLRenderingContext | WebGL2RenderingContext): string | null {\n  const error = gl.getError();\n  switch (error) {\n    case gl.NO_ERROR:\n      return null;\n    case gl.INVALID_ENUM:\n      return 'Invalid enum';\n    case gl.INVALID_VALUE:\n      return 'Invalid value';\n    case gl.INVALID_OPERATION:\n      return 'Invalid operation';\n    case gl.OUT_OF_MEMORY:\n      return 'Out of memory';\n    case gl.CONTEXT_LOST_WEBGL:\n      return 'Context lost';\n    default:\n      return `Unknown error: ${error}`;\n  }\n}","size_bytes":2798},"client/src/components/3d/SafeModel.tsx":{"content":"import { useGLTF } from \"@react-three/drei\";\nimport { useMemo, useState, useEffect } from \"react\";\nimport * as THREE from \"three\";\n\ninterface SafeModelProps {\n  url: string;\n  fallback?: React.ReactNode;\n  children: (scene: THREE.Group) => React.ReactNode;\n  scale?: [number, number, number];\n  position?: [number, number, number];\n  rotation?: [number, number, number];\n}\n\nexport default function SafeModel({ \n  url, \n  fallback = null, \n  children, \n  scale = [1, 1, 1], \n  position = [0, 0, 0], \n  rotation = [0, 0, 0] \n}: SafeModelProps) {\n  const [loadError, setLoadError] = useState<string | null>(null);\n  \n  // Always call hooks in the same order - this is crucial for React\n  const gltfData = useGLTF(url);\n  const { scene } = gltfData;\n  \n  // Clone the scene safely without calling setState inside useMemo\n  const clonedScene = useMemo(() => {\n    if (!scene) {\n      return null;\n    }\n    \n    try {\n      return scene.clone();\n    } catch (cloneError) {\n      console.warn(`Failed to clone model scene: ${url}`, cloneError);\n      // Return original scene as fallback instead of calling setState\n      return scene;\n    }\n  }, [scene, url]);\n  \n  // Handle error states with useEffect (proper React pattern)\n  useEffect(() => {\n    // Clear any previous errors when a new scene loads successfully\n    if (scene && clonedScene && loadError) {\n      setLoadError(null);\n      return;\n    }\n    \n    // Set error if scene is null after GLTF should have loaded\n    if (!scene && !loadError) {\n      const timer = setTimeout(() => {\n        setLoadError('Model loading timeout');\n      }, 5000); // 5 second timeout\n      \n      return () => clearTimeout(timer);\n    }\n  }, [scene, clonedScene, loadError, url]);\n  \n  // Additional check for clone failure\n  useEffect(() => {\n    if (scene && !clonedScene && !loadError) {\n      setLoadError('Failed to process model scene');\n    }\n  }, [scene, clonedScene, loadError]);\n  \n  // Show fallback if there's an error or no scene\n  if (loadError || !clonedScene) {\n    return <>{fallback}</>;\n  }\n  \n  return (\n    <group scale={scale} position={position} rotation={rotation}>\n      <primitive \n        object={clonedScene} \n        castShadow \n        receiveShadow\n      />\n      {children(clonedScene)}\n    </group>\n  );\n}\n\n// Simple fallback component for when models fail to load\nexport function ModelFallback({ \n  color = \"#4fd1c7\", \n  scale = [1, 1, 1] \n}: { \n  color?: string; \n  scale?: [number, number, number]; \n}) {\n  return (\n    <mesh scale={scale}>\n      <boxGeometry args={[1, 1, 1]} />\n      <meshStandardMaterial \n        color={color} \n        transparent \n        opacity={0.6}\n        wireframe \n      />\n    </mesh>\n  );\n}","size_bytes":2698}},"version":1}